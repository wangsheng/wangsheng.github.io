<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victor</title>
  
  <subtitle>问渠哪得清如许，为有源头活水来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://victor87.coding.me/"/>
  <updated>2019-12-19T06:40:51.299Z</updated>
  <id>http://victor87.coding.me/</id>
  
  <author>
    <name>Wang Sheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何将内网Web服务暴露给外网访问</title>
    <link href="http://victor87.coding.me/2019/12/19/%E5%A6%82%E4%BD%95%E5%B0%86%E5%86%85%E7%BD%91Web%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2%E7%BB%99%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
    <id>http://victor87.coding.me/2019/12/19/如何将内网Web服务暴露给外网访问/</id>
    <published>2019-12-19T13:23:02.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，在一台PC电脑上启动一个Web应用服务，然后其他电脑就可以通过IP地址和端口来访问了。这就是所谓的Internet的缩影。</p><p>例如，局域网有一台PC，IP地址是192.168.1.110，然后使用3000端口跑了一个web应用。那么同一局域网下的其他PC设备，只需要在浏览器的地址栏输入：<a href="http://192.168.1.110:3000" target="_blank" rel="noopener">http://192.168.1.110:3000</a> 就可以访问了。但如果你异地的朋友也想访问，那就访问不到了。这个就好比，你住在X小区110号3000室。局域网内访问，就好比你同小区的邻居，很容易就能找到110号3000室。但是如果非本小区的人，初次进入小区，是不可能一下就能找到110号3000室的。</p><p>那如何才能让外部用户访问局域网的某一个Web应用程序呢？答案就是端口映射。端口映射又称端口转发，这个就好比，外来人员来到小区X，找不到110号3000室，就会去问门口保安，保安就告诉了从门口到具体房间的行走路线。这样外来人员就轻松找到了你家。</p><p>实现端口映射，有两种思路：</p><ol><li>找支持端口转发的第三方软件，比如 <a href="https://www.oray.com/" target="_blank" rel="noopener">花生壳</a> 等。</li><li>借助路由器提供的转发功能。</li></ol><p>今天以 <code>TL-WDR5600</code> 型号的TP-Link路由器为例，演示下如何配置。</p><h2 id="1-打开-虚拟服务器-配置页面"><a href="#1-打开-虚拟服务器-配置页面" class="headerlink" title="1. 打开 虚拟服务器 配置页面"></a>1. 打开 <code>虚拟服务器</code> 配置页面</h2><p>登录路由器，点击 <code>应用管理</code>，选择 <code>虚拟服务器</code>。</p><p><img src="http://img.iaquam.com/image/png/port-mappiing-1.png" alt></p><p><img src="http://img.iaquam.com/image/png/port-mappiing-2.png" alt></p><h2 id="2-添加一条转发规则"><a href="#2-添加一条转发规则" class="headerlink" title="2. 添加一条转发规则"></a>2. 添加一条转发规则</h2><p><img src="http://img.iaquam.com/image/png/port-mappiing-3.png" alt></p><p>点击保存，就可以了。</p><h2 id="3-访问测试"><a href="#3-访问测试" class="headerlink" title="3. 访问测试"></a>3. 访问测试</h2><p>首先确定下路由器的出口IP。<a href="https://ip.cn/" target="_blank" rel="noopener">https://ip.cn/</a> 查看 <code>您现在的 IP</code>这里面将显示外网出口IP。</p><p><img src="http://img.iaquam.com/image/png/port-mappiing-4.png" alt></p><p>然后使用这个IP地址，就可以访问到局域网的<a href="http://192.168.1.110:3000了。" target="_blank" rel="noopener">http://192.168.1.110:3000了。</a></p><p><strong>注意：使用路由器的端口映射方案，最好Internet的接入方式是桥接模式，这样出口IP是固定的。因为如果是路由模式接入的Internet，出口IP是动态分配，会经常变化，这样就导致需要时不时切换外网IP地址来访问。<a href="http://wireless.it168.com/a2005/0921/793/000000793641.shtml" target="_blank" rel="noopener">ADSL桥接模式和路由模式的区别</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般情况下，在一台PC电脑上启动一个Web应用服务，然后其他电脑就可以通过IP地址和端口来访问了。这就是所谓的Internet的缩影。&lt;/p&gt;
&lt;p&gt;例如，局域网有一台PC，IP地址是192.168.1.110，然后使用3000端口跑了一个web应用。那么同一局域网下的其他
      
    
    </summary>
    
      <category term="网络安全" scheme="http://victor87.coding.me/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="端口映射" scheme="http://victor87.coding.me/tags/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>5分钟教你实现头像识别</title>
    <link href="http://victor87.coding.me/2019/10/18/5%E5%88%86%E9%92%9F%E6%95%99%E4%BD%A0%E5%AE%9E%E7%8E%B0%E5%A4%B4%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    <id>http://victor87.coding.me/2019/10/18/5分钟教你实现头像识别/</id>
    <published>2019-10-18T11:25:54.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>利用百度提供的定制化训练和服务平台<a href="http://ai.baidu.com/easydl/" target="_blank" rel="noopener">EasyDL</a>，无需写任何代码，就可以完成一个模型的训练：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个模型 -&gt; 上传训练的数据 -&gt; 训练模型 -&gt; 验证模型 -&gt; 发布模型</span><br></pre></td></tr></table></figure><h3 id="1-创建模型"><a href="#1-创建模型" class="headerlink" title="1. 创建模型"></a>1. 创建模型</h3><p><img src="http://img.iaquam.com/image/png/easydl-1.png" alt></p><h3 id="2-上传训练的数据"><a href="#2-上传训练的数据" class="headerlink" title="2. 上传训练的数据"></a>2. 上传训练的数据</h3><p><img src="http://img.iaquam.com/image/png/easydl-2.png" alt></p><h3 id="3-训练模型"><a href="#3-训练模型" class="headerlink" title="3. 训练模型"></a>3. 训练模型</h3><p><img src="http://img.iaquam.com/image/png/easydl-3.png" alt></p><h3 id="4-验证模型"><a href="#4-验证模型" class="headerlink" title="4.  验证模型"></a>4.  验证模型</h3><p><img src="http://img.iaquam.com/image/png/easydl-4.png" alt></p><p><img src="http://img.iaquam.com/image/png/easydl-5.png" alt></p><p><img src="http://img.iaquam.com/image/png/easydl-6.png" alt></p><h3 id="5-发布模型"><a href="#5-发布模型" class="headerlink" title="5. 发布模型"></a>5. 发布模型</h3><p><img src="http://img.iaquam.com/image/png/easydl-7.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用百度提供的定制化训练和服务平台&lt;a href=&quot;http://ai.baidu.com/easydl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EasyDL&lt;/a&gt;，无需写任何代码，就可以完成一个模型的训练：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
      <category term="大数据 &amp; AI" scheme="http://victor87.coding.me/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE-AI/"/>
    
    
      <category term="EasyDL" scheme="http://victor87.coding.me/tags/EasyDL/"/>
    
      <category term="深度学习" scheme="http://victor87.coding.me/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Mac双系统安装</title>
    <link href="http://victor87.coding.me/2019/09/20/Mac%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://victor87.coding.me/2019/09/20/Mac双系统安装/</id>
    <published>2019-09-20T21:23:58.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-恢复出厂"><a href="#一-恢复出厂" class="headerlink" title="一. 恢复出厂"></a>一. 恢复出厂</h2><p><strong>注意：如果新的电脑，可以跳过此步骤。</strong></p><p>对于旧的电脑，需要删除原有系统的所有的文件，可以通过系统自带的工具来恢复出厂设置。当然，如果需要备份的，请提前备份到别的磁盘。</p><ol><li>重启电脑并按下 <code>Command+R</code> 组合键。<br><img src="https://pic2.zhimg.com/80/v2-7420d594cacc018dacb57d2e00e57821_hd.jpg" alt="img"></li><li>系统重启时，检测到该组合键被按下，会进入 <code>OS X Utilities</code> 界面。选择第四个 <code>磁盘工具</code> 菜单，并点击右下角的 <code>继续</code> 按钮。<br><img src="https://pic4.zhimg.com/80/v2-99863f45fcaf87a2d979f6b201ddbd17_hd.jpg" alt="img"></li><li>在磁盘管理界面，选择内置主硬盘名称，一般为 <code>Macintosh HD</code>，具体名称依电脑而异。接着选择<code>抹掉</code>，等待抹掉成功的提示。<br><img src="http://img.iaquam.com/image/jpg/mac-join-windows-install-5.JPG" alt></li><li>抹掉成功后，关闭对话框，返回 <code>OS X Utilities</code> 界面，选择第二个 <code>重新安装 macOS</code>菜单，并点击右下角的 <code>继续</code> 按钮。(<strong>注意：重新安装时，必须保证电脑联网正常，且整个过程中需要保证电源供电状态。</strong>)</li></ol><h2 id="二、安装Windows"><a href="#二、安装Windows" class="headerlink" title="二、安装Windows"></a>二、安装Windows</h2><h3 id="1-安装包准备"><a href="#1-安装包准备" class="headerlink" title="1. 安装包准备"></a>1. 安装包准备</h3><ul><li>windows镜像iso文件，没有镜像文件的，可访问 <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">itellyou</a> 下载</li><li>如果只有WiFi，没有网线的话，还需要准备一个自带网卡版的驱动精灵安装包</li><li>Windows激活工具</li></ul><blockquote><p>注意：此双系统安装方法，是利用Mac自带的 <code>启动转换助理</code> 工具安装的，关于macOS和Windows双系统的版本兼容性问题，请参见<a href="https://support.apple.com/zh-cn/HT201468" target="_blank" rel="noopener">官方说明</a>。</p></blockquote><h3 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2. 开始安装"></a>2. 开始安装</h3><ol><li>打开Mac自带的  <code>启动转换助理</code> 工具，选择iso文件，并拖动分割线调整mac与Windows各自占用磁盘大小，然后点击 <code>安装</code> 按钮，后续根据提示进行操作即可。<br><img src="http://img.iaquam.com/image/jpg/mac-join-windows-install-1.JPG" alt></li><li>待  <code>启动转换助理</code> 工具完成磁盘分区，以及Windows安装文件的拷贝后，会自动进入安装Windows的流程。根据提示，进行操作即可。<br><img src="http://img.iaquam.com/image/jpg/mac-join-windows-install-2.JPG" alt></li><li>安装完成后，按照界面向导，进行初始化设置，包含登录账号和密码。</li><li>Windows安装完成后，使用激活工具，对Windows进行激活。</li><li>使用驱动精灵，安装相应的驱动程序。</li><li>使用Windows自带的磁盘管理工具，进行分区划分。因为默认只有一个C盘(BOOTCAMP卷)，最好再摘出来一个D盘。<ul><li>选择<code>BOOTCAMP卷</code>，点击右键，选择<code>压缩卷</code><br><img src="http://img.iaquam.com/image/jpg/mac-join-windows-install-3.JPG" alt></li><li>然后输入压缩空间量(即新添加卷的大小)，默认的值为二等分BOOTCAMP卷的大小</li><li>选择未分配的卷，点击右键，选择<code>新建简单卷</code>，根据向导完成设置<br><img src="http://img.iaquam.com/image/jpg/mac-join-windows-install-4.JPG" alt></li></ul></li></ol><h3 id="三、双系统之间的切换"><a href="#三、双系统之间的切换" class="headerlink" title="三、双系统之间的切换"></a>三、双系统之间的切换</h3><p>重启电脑并按下 <code>Option</code>键，然后选择需要进入的系统。</p><h3 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h3><p>如果使用了iMac或者MacBook自带的蓝牙无线鼠标，在安装Windows之前，在macOS的 <code>系统偏好设置</code>里，把鼠标右键单击开启，否则进入Windows时，鼠标右键不起作用。<br><img src="http://img.iaquam.com/image/jpg/mac-join-windows-install-6.JPG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-恢复出厂&quot;&gt;&lt;a href=&quot;#一-恢复出厂&quot; class=&quot;headerlink&quot; title=&quot;一. 恢复出厂&quot;&gt;&lt;/a&gt;一. 恢复出厂&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：如果新的电脑，可以跳过此步骤。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于旧的电脑，需要
      
    
    </summary>
    
      <category term="Mac" scheme="http://victor87.coding.me/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://victor87.coding.me/tags/Mac/"/>
    
      <category term="Windows" scheme="http://victor87.coding.me/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 php升级</title>
    <link href="http://victor87.coding.me/2019/05/22/Centos7-php%E5%8D%87%E7%BA%A7/"/>
    <id>http://victor87.coding.me/2019/05/22/Centos7-php升级/</id>
    <published>2019-05-22T16:24:09.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-检查当前安装的PHP包"><a href="#1-检查当前安装的PHP包" class="headerlink" title="1. 检查当前安装的PHP包"></a>1. 检查当前安装的PHP包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos ~]# yum list installed | grep php</span><br><span class="line">php70w-bcmath.x86_64               7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-cli.x86_64                  7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-common.x86_64               7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-devel.x86_64                7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-fpm.x86_64                  7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-gd.x86_64                   7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-mbstring.x86_64             7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-mcrypt.x86_64               7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-mysqlnd.x86_64              7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-pdo.x86_64                  7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-pear.noarch                 1:1.10.4-1.w7               @webtatic</span><br><span class="line">php70w-pecl-igbinary.x86_64        2.0.1-1.w7                  @webtatic</span><br><span class="line">php70w-pecl-imagick.x86_64         3.4.3-1.w7                  @webtatic</span><br><span class="line">php70w-pecl-memcached.x86_64       3.0.3-2.w7                  @webtatic</span><br><span class="line">php70w-process.x86_64              7.0.25-1.w7                 @webtatic</span><br><span class="line">php70w-xml.x86_64                  7.0.25-1.w7                 @webtatic</span><br></pre></td></tr></table></figure><h2 id="2-完全移除当前PHP安装包以免起冲突"><a href="#2-完全移除当前PHP安装包以免起冲突" class="headerlink" title="2. 完全移除当前PHP安装包以免起冲突"></a>2. 完全移除当前PHP安装包以免起冲突</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos ~]# yum remove php*</span><br></pre></td></tr></table></figure><h2 id="3-查看当前yum源都提供了哪些可安装的PHP版本"><a href="#3-查看当前yum源都提供了哪些可安装的PHP版本" class="headerlink" title="3. 查看当前yum源都提供了哪些可安装的PHP版本"></a>3. 查看当前yum源都提供了哪些可安装的PHP版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos ~]# yum list php*</span><br></pre></td></tr></table></figure><p>注意：默认的yum源无法升级PHP，需要添加第三方yum源，我们选择webtatic库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CentOs 5.x</span><br><span class="line">rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm</span><br><span class="line">CentOs 6.x</span><br><span class="line">rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</span><br><span class="line">CentOs 7.X</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure><h2 id="4、安装PHP及相关插件，这里以PHP7-1-x为例"><a href="#4、安装PHP及相关插件，这里以PHP7-1-x为例" class="headerlink" title="4、安装PHP及相关插件，这里以PHP7.1.x为例"></a>4、安装PHP及相关插件，这里以PHP7.1.x为例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-fpm php71w-gd php71w-mbstring php71w-mysqlnd php71w-opcache php71w-pdo php71w-xml php71w-ldap php71w-mcrypt php71w-bcmath</span><br></pre></td></tr></table></figure><h2 id="5、如果安装了PHP的扩展库，可以通过pecl命令安装"><a href="#5、如果安装了PHP的扩展库，可以通过pecl命令安装" class="headerlink" title="5、如果安装了PHP的扩展库，可以通过pecl命令安装"></a>5、如果安装了PHP的扩展库，可以通过pecl命令安装</h2><h3 id="5-1-安装pecl"><a href="#5-1-安装pecl" class="headerlink" title="5.1 安装pecl"></a>5.1 安装pecl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果php &lt; 7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install php-pear</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果php &gt;= 7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://pear.php.net/go-pear.phar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> php go-pear.phar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 否则会报PHP syntax error, unexpected <span class="string">'new'</span> (T_NEW) <span class="keyword">in</span> /usr/share/pear/PEAR/Frontend.php on line 91</span></span><br></pre></td></tr></table></figure><h3 id="5-2-安装mongo扩展"><a href="#5-2-安装mongo扩展" class="headerlink" title="5.2 安装mongo扩展"></a>5.2 安装mongo扩展</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pecl install mongodb</span></span><br></pre></td></tr></table></figure><h3 id="5-3-安装mosquitto扩展"><a href="#5-3-安装mosquitto扩展" class="headerlink" title="5.3 安装mosquitto扩展"></a>5.3 安装mosquitto扩展</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pecl install mosquitto -c channel://pecl.php.net/mosquitto-0.4.0</span></span><br></pre></td></tr></table></figure><h3 id="5-4-查看使用pecl安装的扩展有哪些"><a href="#5-4-查看使用pecl安装的扩展有哪些" class="headerlink" title="5.4 查看使用pecl安装的扩展有哪些"></a>5.4 查看使用pecl安装的扩展有哪些</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pecl list</span></span><br><span class="line">Installed packages, channel pecl.php.net:</span><br><span class="line">=========================================</span><br><span class="line">Package   Version State</span><br><span class="line">Mosquitto 0.4.0   beta</span><br><span class="line">mongodb   1.5.3   stable</span><br></pre></td></tr></table></figure><h2 id="6、如果服务器运行了PHP的web程序，需要重启php-fpm"><a href="#6、如果服务器运行了PHP的web程序，需要重启php-fpm" class="headerlink" title="6、如果服务器运行了PHP的web程序，需要重启php-fpm"></a>6、如果服务器运行了PHP的web程序，需要重启php-fpm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos ~]# systemctl restart php-fpm</span><br></pre></td></tr></table></figure><h2 id="7-查看PHP版本"><a href="#7-查看PHP版本" class="headerlink" title="7. 查看PHP版本"></a>7. 查看PHP版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# php -v</span><br><span class="line">PHP 7.1.29 (cli) (built: May 13 2019 18:32:21) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.1.29, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-检查当前安装的PHP包&quot;&gt;&lt;a href=&quot;#1-检查当前安装的PHP包&quot; class=&quot;headerlink&quot; title=&quot;1. 检查当前安装的PHP包&quot;&gt;&lt;/a&gt;1. 检查当前安装的PHP包&lt;/h2&gt;&lt;figure class=&quot;highlight sh
      
    
    </summary>
    
      <category term="PHP" scheme="http://victor87.coding.me/categories/PHP/"/>
    
    
      <category term="Centos" scheme="http://victor87.coding.me/tags/Centos/"/>
    
      <category term="PHP" scheme="http://victor87.coding.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP数据类型声明那些事</title>
    <link href="http://victor87.coding.me/2019/05/21/PHP%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://victor87.coding.me/2019/05/21/PHP数据类型声明那些事/</id>
    <published>2019-05-21T18:22:40.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>对于PHP函数的入参，从5.0开始，引入了array类型，来指定所传参数必须为数组。从7.0开始，又引入了bool、float、int、string，分别来指定所传的参数必须为布尔、浮点、整型和字符串。而且7.0同时引入了可以声明函数返回类型的新特性。</p><p>这种新特性的引入，其实隐性表达了PHP逐渐向强类型转换，因为强类型可以增强程序运行时的健壮性，以及重构时静态代码分析更方便。</p><p>所以借助PHP 7.0这样的新特性，就可以像强类型语言一样写代码了：</p><ol><li><p>生日类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Birthday</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  int 年 */</span></span><br><span class="line">    <span class="keyword">private</span> $year;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  int 月 */</span></span><br><span class="line">    <span class="keyword">private</span> $month;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  int 日 */</span></span><br><span class="line">    <span class="keyword">private</span> $day;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Birthday constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $month</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $day</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($year, $month, $day)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;year = $year;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;month = $month;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;day = $day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"$this-&gt;year-$this-&gt;month-$this-&gt;day"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>人类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  string 名字 */</span></span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  Birthday 出生日期 */</span></span><br><span class="line">    <span class="keyword">private</span> $birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  string 简介 */</span></span><br><span class="line">    <span class="keyword">private</span> $profile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Birthday</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBirthday</span><span class="params">()</span>: <span class="title">Birthday</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Birthday $birthday</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBirthday</span><span class="params">(Birthday $birthday)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;birthday = $birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProfile</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;profile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $profile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setProfile</span><span class="params">(string $profile)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;profile = $profile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$birthday = <span class="keyword">new</span> Birthday(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person();</span><br><span class="line">$person-&gt;setName(<span class="string">"张三"</span>);</span><br><span class="line">$person-&gt;setBirthday($birthday);</span><br><span class="line">$person-&gt;setProfile(<span class="string">"Hi, Nice to meet you!"</span>);</span><br><span class="line"></span><br><span class="line">dump($person-&gt;getName());</span><br><span class="line">dump($person-&gt;getBirthday());</span><br><span class="line">dump($person-&gt;getProfile());</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"张三"</span><br><span class="line">"2018-10-10"</span><br><span class="line">"Hi, Nice to meet you!"</span><br></pre></td></tr></table></figure></li><li><p>但是，这里有一个坑。比方说姓名是必填的，这个没疑问，但是有的用户不填写生日或者简介，那么这时候会发生什么情况呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$person = <span class="keyword">new</span> Person();</span><br><span class="line">$person-&gt;setName(<span class="string">"李四"</span>);</span><br><span class="line">$person-&gt;setBirthday(<span class="keyword">null</span>); <span class="comment">//Exception 'TypeError' with message 'Argument 1 passed to Person::setBirthday() must be an instance of Birthday, null given, called in demo.php on line 46'</span></span><br><span class="line">$person-&gt;setProfile(<span class="keyword">null</span>); <span class="comment">//Exception 'TypeError' with message 'Argument 1 passed to Person::setProfile() must be of the type string, null given, called in demo.php on line 47'</span></span><br><span class="line"></span><br><span class="line">dump($person-&gt;getName());</span><br><span class="line">dump($person-&gt;getBirthday()); <span class="comment">// Exception 'TypeError' with message 'Return value of Person::getBirthday() must be an instance of Birthday, null returned'</span></span><br><span class="line">dump($person-&gt;getProfile()); <span class="comment">// Exception 'TypeError' with message 'Return value of Person::getProfile() must be of the type string, null returned'</span></span><br></pre></td></tr></table></figure></li></ol><p>因为在php，NULL对象跟自定义类的对象或者string对象不是同一种类型，所以不管是赋值还是返回值都会报类型错误。这时候就无可奈何地把声明的类型一个一个删掉了。一脸嫌弃的样子飘过(Java的同学甚至会感到莫名其妙)。</p><h2 id="官方改进"><a href="#官方改进" class="headerlink" title="官方改进"></a>官方改进</h2><p>估计是收到吐槽多了，PHP在7.1版本立马加入了<code>Nullable types</code> 类型，用法很简单，在原有的入参类型或者返回类型前面加入<code>?</code>即可。比方说<code>?string</code>代表，既可以传递string类型的值，也可以传递NULL类型的值。返回值也一样。有了该特性，我们就又能按照强类型的思路编程了，那么Person类就可以这么写了：</p>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">/** <span class="doctag">@var</span>  string 名字 */</span></span><br><span class="line">  <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@var</span>  Birthday 出生日期 */</span></span><br><span class="line">  <span class="keyword">private</span> $birthday;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@var</span>  string 简介 */</span></span><br><span class="line">  <span class="keyword">private</span> $profile;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Birthday</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBirthday</span><span class="params">()</span>: ?<span class="title">Birthday</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;birthday;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Birthday $birthday</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBirthday</span><span class="params">(?Birthday $birthday)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;birthday = $birthday;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProfile</span><span class="params">()</span>: ?<span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;profile;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $profile</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setProfile</span><span class="params">(?string $profile)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;profile = $profile;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿李四的数据，再跑一次</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$person = <span class="keyword">new</span> Person();</span><br><span class="line">$person-&gt;setName(<span class="string">"李四"</span>);</span><br><span class="line">$person-&gt;setBirthday(<span class="keyword">null</span>);</span><br><span class="line">$person-&gt;setProfile(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">dump($person-&gt;getName());</span><br><span class="line">dump($person-&gt;getBirthday());</span><br><span class="line">dump($person-&gt;getProfile());</span><br></pre></td></tr></table></figure><p>输出如下:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"李四"</span><br><span class="line">null</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>可以看出，在原有代码里，把那些可能会出现null的属性前面添加<code>?</code>之后，类型异常的问题就解决了，这样调用方就可以顺利地调用底层模块了。你好，我好，大家好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于PHP函数的入参，从5.0开始，引入了array类型，来指定所传参数必须为数组。从7.0开始，又引入了bool、float、int、string，分别来指定所传的参数必须为布尔、浮点、整型和字符串。而且7.0同时引入了可以声明函数返回类型的新特性。&lt;/p&gt;
&lt;p&gt;这种新
      
    
    </summary>
    
      <category term="PHP" scheme="http://victor87.coding.me/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://victor87.coding.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>GitLab持续集成CI</title>
    <link href="http://victor87.coding.me/2019/02/21/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI/"/>
    <id>http://victor87.coding.me/2019/02/21/GitLab持续集成CI/</id>
    <published>2019-02-21T18:55:51.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发中，对于开发人员来说，负责编写代码来完成需求的开发或者Bug的修复。如果是Web类型的应用，开发结束后，如何发布供用户访问呢？</p><p>在传统的方式中，每次开发完代码后，由开发将代码转交给运维人员，然后由运维人员来将代码发布到Web服务器上，供用户访问使用。</p><p>但是互联网讲究的是敏捷开发，所以要面临频繁的发版需求；再加上一般分为测试环境(test)、预发布环境(pre)和正式环境(pro)。这样一来，高频次发版 + 多环境发布使这种跨部门的传统发布模式与敏捷开发的思想格格不入。那么，有没有一种自动化的方案来完成这样重复无味的工作呢？</p><p>如果你们使用Git作为版本控制工具，且使用GitLab作为源码托管的话，那么就可以使用GitLab(8.0及以上版本)自带的CI拓展功能完成自动化构建和部署，即CI(Continuous Integration)/CD(Continuous Delivery)。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab-CI"></a>GitLab-CI</h3><p>GitLab从8.0版本开始，推出了自动化集成和部署的解决方案：<a href="https://docs.gitlab.com/ce/ci/quick_start/README.html" target="_blank" rel="noopener">Gitlab-CI</a>，并且对现有项目默认开启。如果项目中需要自动化集成，那么只需要在项目仓库的根目录添加 <code>.gitlab-ci.yml</code>文件，指定执行构建的 <a href="https://docs.gitlab.com/ce/ci/runners/README.html" target="_blank" rel="noopener">GitLab-Runner</a> ，那么之后每一次合并请求(MR)或者推送代码(Push)都会触发CI的<a href="https://docs.gitlab.com/ce/ci/pipelines.html" target="_blank" rel="noopener">任务流水线(Pipeline)</a>。</p><h3 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab-Runner"></a>GitLab-Runner</h3><p>Gitlab-Runner 是具体执行构建和部署任务的执行器。Runner可以跟Gitlab安装台同一台机器上，但是考虑到Runner的资源消耗问题和安全性问题，官方不建议将Runner和Gitlab安装台一台物理机上。</p><p>Runner又分为两种：</p><ul><li>Shared Runners 可以运行开启了 <code>Allow shared runners</code> 选项的所有项目</li><li>Specific Runners 只能运行指定的项目 </li></ul><h3 id="任务流水线-Pipelines"><a href="#任务流水线-Pipelines" class="headerlink" title="任务流水线 Pipelines"></a>任务流水线 Pipelines</h3><p><img src="https://docs.gitlab.com/ce/ci/img/types-of-pipelines.png" alt></p><p>Pipelines是指不同阶段的一组任务。同一个阶段的任务可以并行执行(如果有足够多的并行Runner)，如果此阶段的任务都执行成功，则流水线会自动进入下一个阶段。如果某一个任务执行失败，则下一阶段的任务不会执行。可以通过点击管理界面中的Pipelines标签，来查看GitLab上的流水线页面。</p><h4 id="开发工作流"><a href="#开发工作流" class="headerlink" title="开发工作流"></a>开发工作流</h4><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines-goal.png" alt></p><ol><li>Branch Flow： 例如基于dev、qa、staging、production的不同分支</li><li>Trunk-based Flow： 例如特性分支和单个master分支，可能带有发布tag</li><li>Fork-based Flow： 例如来自于forks的合并请求</li></ol><h3 id="徽章-Badges"><a href="#徽章-Badges" class="headerlink" title="徽章 Badges"></a>徽章 Badges</h3><p>GitLab从10.7开始，引入徽章的感念。它包含Pipeline状态以及测试覆盖报告等类型的徽章。</p><p><img src="http://img.iaquam.com/image/png/gitlab-badges.png" alt></p><h2 id="1-安装-GitLab-Runner"><a href="#1-安装-GitLab-Runner" class="headerlink" title="1. 安装 GitLab-Runner"></a>1. 安装 GitLab-Runner</h2><p>以Centos为例，其他机型参见<a href="https://docs.gitlab.com/runner/install/linux-repository.html" target="_blank" rel="noopener">官方文档</a></p><ol><li><p>添加GitLab官方仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></li><li><p>安装最新版本的GitLab Runner，如果需要安装制定版本的Runner，可以跳过此步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure></li><li><p>安装指定版本的GitLab Runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum list gitlab-runner --showduplicates | sort -r</span><br><span class="line">sudo yum install gitlab-runner-10.0.0-1</span><br></pre></td></tr></table></figure></li><li><p>升级GitLab Runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-注册GitLab-Runner"><a href="#2-注册GitLab-Runner" class="headerlink" title="2. 注册GitLab-Runner"></a>2. 注册GitLab-Runner</h2><h3 id="注册一个共享Runner"><a href="#注册一个共享Runner" class="headerlink" title="注册一个共享Runner"></a>注册一个共享Runner</h3><ol><li><p>访问GitLab的 <code>admin/runners</code> 页面，获取共享Runner的token<br><img src="https://docs.gitlab.com/ee/ci/runners/img/shared_runners_admin.png" alt></p></li><li><p>注册Runner<br>从GitLab8.2开始，共享Runners默认是开启状态。但是你可以通过每个项目的 <code>Settings -&gt; CI/CD</code>页面手动禁用。之前版本的共享Runners默认是禁用状态。</p><p>以GNU/Linux为例，以下是注册的操作步骤：</p><ol><li><p>运行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure></li><li><p>填写GitLab示例URL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">https://gitlab.com</span><br></pre></td></tr></table></figure></li><li><p>填写GitLab-CI的token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line"> xxx</span><br></pre></td></tr></table></figure></li><li><p>给Runner起一个名字，以后也可以通过GitLab的UI页面修改此名字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">[hostame] my-runner</span><br></pre></td></tr></table></figure></li><li><p>给Runner打一个标签，以后也可以通过GitLab的UI页面修改此标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">my-tag,another-tag</span><br></pre></td></tr></table></figure></li><li><p>输入Runner的执行器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">docker</span><br></pre></td></tr></table></figure></li><li><p>如果你选择Docker作为执行器，注册引导程序会问你要docker的镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the Docker image (eg. ruby:2.1):</span><br><span class="line">alpine:latest</span><br></pre></td></tr></table></figure><p><img src="http://img.iaquam.com/image/png/gitlab-runner1.png" alt></p></li></ol></li></ol><h3 id="注册一个特定Runner"><a href="#注册一个特定Runner" class="headerlink" title="注册一个特定Runner"></a>注册一个特定Runner</h3><p>可以通过以下两种方式，创建特定Runner：</p><ol><li>使用项目级别的注册token创建一个Runner</li><li>转换一个共享的Runner为特定Runner(这种方法需要你是平台管理员)</li></ol><p>更多详细资料，请参见<a href="https://docs.gitlab.com/runner/register/index.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="3-配置CI"><a href="#3-配置CI" class="headerlink" title="3. 配置CI"></a>3. 配置CI</h2><p>对于GitLab里的项目，如果想启用持续集成。只需在项目仓库的根目录下创建一个 <code>.gitlab-ci.yml</code>即可。关于此配置文件的全部介绍，可参见<a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">官方文档</a>。</p><p>以下是我使用<code>vue-admin-template</code> demo项目作为练手，配置持续集成和持续部署的配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shell</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">"$CI_JOB_NAME-$CI_COMMIT_REF_NAME"</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">3</span> <span class="string">days</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shell</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">'execute test...'</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">on_success</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shell</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-avzh</span> <span class="string">--progress</span> <span class="string">--stats</span> <span class="string">--delete</span> <span class="string">./dist/</span> <span class="string">"$SRV_PATH_TEST"</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_pre:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shell</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-avzh</span> <span class="string">--progress</span> <span class="string">--stats</span> <span class="string">--delete</span> <span class="string">./dist/</span> <span class="string">"$SRV_PATH_PRE"</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pre</span> </span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pre</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_pro:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-avzh</span> <span class="string">--progress</span> <span class="string">--stats</span> <span class="string">--delete</span> <span class="string">./dist/</span> <span class="string">"$SRV_PATH_PRO"</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pro</span> </span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><p>配置文件解读：</p><ul><li>cache 配置构建完后需要保存的文件。为了加快构建，需要缓存node_modules目录的文件，否则每次npm install 都需要重新安装一遍，太慢。</li><li>stages 描述CI/CD流水线一共几个阶段，这里可以看到，我指定了三个阶段：build、test、deploy。</li><li>build 属于构建任务(Job)<ul><li>stage 指定任务所属的阶段</li><li>tags 指定可以执行此构建任务的runner需要含有的标签</li><li>script 具体执行构建的脚本指令</li><li>artifacts 构建产生的目标产物<ul><li>name 指定目标产物压缩包的名字</li><li>paths 指定目标产物的路径</li><li>expire_in 指定目标产物保存的时长，超过时长后会自动删除</li></ul></li></ul></li><li>test 属于测试任务(Job)<ul><li>when <code>on_success</code>只有当先前阶段的所有任务都执行成功，才会触发本任务</li></ul></li><li>deploy_test 测试环境部署任务(Job)<ul><li>script 这里使用rsync工具，将构建产物同步到Web服务器代码目录里。<code>$SRV_PATH_TEST</code>属于自定义的私密变量，可在GitLab上<code>group_name/project_name/settings/ci_cd</code>页面中进行设置。另外，此页面底部有关于构建和测试覆盖的徽章的设置代码，可以拷贝到项目根目录的README.md文档中，这样就能查看项目构建动态以及测试覆盖度了。<br><img src="http://img.iaquam.com/image/png/gitlab-secret-variable.png" alt></li><li>environment 部署环境，可在GitLab上<code>group_name/project_name/environments</code>页面中设置。<br><img src="http://img.iaquam.com/image/png/gitlab-environments.png" alt><ul><li>name 当前构建任务对应的环境，需要跟页面中设置的一致</li></ul></li><li>only 指定只运行哪些分支或者标签(tag)的代码。这里的<code>dev</code>表示，当dev分支上有代码变更时触发此部署。</li></ul></li><li>deploy_pre 预发布环境部署任务(Job)<ul><li>only 这里的<code>pre</code>表示，当pre分支上有代码变更时触发此部署。</li></ul></li><li>deploy_pro 生产环境部署任务(Job)<ul><li>only 这里的<code>master</code>表示，当master分支上有代码变更时触发此部署。</li><li>when <code>manual</code>表示生产环境的部署任务，需要手动来触发。</li></ul></li></ul><p>运行效果图：</p><ul><li>CI/CD流水线列表<br><img src="http://img.iaquam.com/image/png/gitlab-pipelines.png" alt></li><li>CI/CD流水线详情<br><img src="http://img.iaquam.com/image/png/gitlab-pipelines-detail.png" alt></li><li>构建任务执行详情<br><img src="http://img.iaquam.com/image/png/gitlab-job-build1.png" alt><br><img src="http://img.iaquam.com/image/png/gitlab-job-build2.png" alt></li><li>测试任务执行详情<br><img src="http://img.iaquam.com/image/png/gitlab-job-test.png" alt></li><li>部署任务执行详情<br><img src="http://img.iaquam.com/image/png/gitlab-job-deploy1.png" alt><br><img src="http://img.iaquam.com/image/png/gitlab-job-deploy2.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在软件开发中，对于开发人员来说，负责编写代码来完成需求的开发或者Bug的修复。如果是Web类型的应用，开发结束后，如何发布供用户访问呢？&lt;/p&gt;
&lt;p&gt;在传统的方式中，每次开发完代码后，由开发将代码转交给运维人员，然后由运维人员来将代码发布到Web服务器上，供用户访问使用。
      
    
    </summary>
    
      <category term="Git" scheme="http://victor87.coding.me/categories/Git/"/>
    
    
      <category term="持续集成" scheme="http://victor87.coding.me/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="git" scheme="http://victor87.coding.me/tags/git/"/>
    
      <category term="GitLab" scheme="http://victor87.coding.me/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>GitLab重置管理员密码</title>
    <link href="http://victor87.coding.me/2019/02/20/GitLab%E9%87%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81/"/>
    <id>http://victor87.coding.me/2019/02/20/GitLab重置管理员密码/</id>
    <published>2019-02-20T10:34:01.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>自行安装GitLab后，默认会有一个超级管理员账号：</p><ul><li>username: root</li><li>email: <a href="mailto:admin@example.com" target="_blank" rel="noopener">admin@example.com</a></li><li>password: xxx</li></ul><p>一般安装完，做完基本设置后，就创建了一个自己的账号来创建和管理group以及project了。时间一长，很容易忘记平台管理员的账号，再加上之前没有修改默认管理员的邮箱，就导致没有机会通过邮箱找回密码了。</p><p>那么遇到这种情况，如何找到管理员密码呢？难道需要重新安装一次GitLab么？</p><p>庆幸的是，GitLab使用的是Rails开发的，如果懂Rails开发的朋友可能想到了Rails的console了。对的，通过Rails的console可以很方便访问数据持久化层，从而完成账号修改工作。</p><p>这样一来，就可以有两种方法获取平台管理权限了：</p><ul><li><p>方法一：修改root账号的密码</p></li><li><p>方法二：将自己的账号赋予admin权限</p></li></ul><h2 id="修改root账号密码"><a href="#修改root账号密码" class="headerlink" title="修改root账号密码"></a>修改root账号密码</h2><ol><li><p>登录GitLab服务器，切换到git用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - git</span><br><span class="line">上一次登录：二 2月 19 17:22:46 CST 2019pts/1 上</span><br><span class="line">-sh-4.2$</span><br></pre></td></tr></table></figure></li><li><p>进入Rails的控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-sh-4.2$ gitlab-rails console production</span><br><span class="line">Loading production environment (Rails 4.2.8)</span><br></pre></td></tr></table></figure></li><li><p>查找到root账号实体对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">irb(main):007:0&gt; user = User.where(username:"root").first</span><br><span class="line">=&gt; #&lt;User id: 1, email: "admin@example.com", created_at: "2017-08-04 05:13:25", updated_at: "2019-02-20 02:45:24", name: "Administrator", admin: true, projects_limit: 100000, skype: "", linkedin: "", twitter: "", authentication_token: "jd7ym2eFqtysemi3KJy9", bio: nil, username: "root", can_create_group: true, can_create_team: false, state: "active", color_scheme_id: 5, password_expires_at: nil, created_by_id: nil, last_credential_check_at: nil, avatar: nil, hide_no_ssh_key: false, website_url: "", notification_email: "admin@example.com", hide_no_password: false, password_automatically_set: false, location: nil, encrypted_otp_secret: nil, encrypted_otp_secret_iv: nil, encrypted_otp_secret_salt: nil, otp_required_for_login: false, otp_backup_codes: nil, public_email: "", dashboard: 0, project_view: 2, consumed_timestep: nil, layout: 0, hide_project_limit: false, otp_grace_period_started_at: nil, external: false, incoming_email_token: "2mozrbmg71dnrxiqd4p7tzgsx", organization: nil, require_two_factor_authentication_from_group: false, two_factor_grace_period: 48, ghost: nil, last_activity_on: "2017-08-21", notified_of_own_activity: false, preferred_language: "en", rss_token: "y8j52nca719HmzQfDQF4", external_email: false, email_provider: nil&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改root的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">irb(main):004:0&gt; user.password = "11111111"</span><br><span class="line">=&gt; "11111111"</span><br><span class="line">irb(main):006:0&gt; user.save!</span><br><span class="line">Enqueued ActionMailer::DeliveryJob (Job ID: 36fc27ef-8065-4f06-b56b-b389b5c2d3c4) to Sidekiq(mailers) with arguments: "DeviseMailer", "password_change", "deliver_now", gid://gitlab/User/1</span><br><span class="line">=&gt; true</span><br></pre></td></tr></table></figure><p>至此，就可以使用root和11111111登录GitLab了。</p></li></ol><h2 id="将自己的账号赋予admin权限"><a href="#将自己的账号赋予admin权限" class="headerlink" title="将自己的账号赋予admin权限"></a>将自己的账号赋予admin权限</h2><ol><li><p>登录GitLab服务器，切换到git用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - git</span><br><span class="line">上一次登录：二 2月 19 17:22:46 CST 2019pts/1 上</span><br><span class="line">-sh-4.2$</span><br></pre></td></tr></table></figure></li><li><p>进入Rails的控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-sh-4.2$ gitlab-rails console production</span><br><span class="line">Loading production environment (Rails 4.2.8)</span><br></pre></td></tr></table></figure></li><li><p>查找到自己账号实体对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">irb(main):009:0&gt; user = User.where(username:"wangsheng").first</span><br><span class="line">=&gt; #&lt;User id: 2, email: "wangsheng@foo.bar", created_at: "2017-08-04 05:24:54", updated_at: "2019-02-20 02:39:07", name: "王胜", admin: true, projects_limit: 100000, skype: "", linkedin: "", twitter: "", authentication_token: "SvbRRSSSH_p_oJxEKXPL", bio: "", username: "wangsheng", can_create_group: true, can_create_team: false, state: "active", color_scheme_id: 5, password_expires_at: nil, created_by_id: nil, last_credential_check_at: nil, avatar: "avatar.png", hide_no_ssh_key: false, website_url: "", notification_email: "wangsheng@foo.bar", hide_no_password: false, password_automatically_set: false, location: "", encrypted_otp_secret: nil, encrypted_otp_secret_iv: nil, encrypted_otp_secret_salt: nil, otp_required_for_login: false, otp_backup_codes: nil, public_email: "", dashboard: 0, project_view: 2, consumed_timestep: nil, layout: 0, hide_project_limit: false, otp_grace_period_started_at: nil, external: false, incoming_email_token: "7cfayhmnjf5xlpp2fy8gdyjnh", organization: "", require_two_factor_authentication_from_group: false, two_factor_grace_period: 48, ghost: nil, last_activity_on: "2019-02-19", notified_of_own_activity: false, preferred_language: "en", rss_token: "Jbjx-wxfRxHErC4f_yNT", external_email: false, email_provider: nil&gt;</span><br></pre></td></tr></table></figure></li><li><p>赋予admin权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">irb(main):003:0&gt; user.admin = true</span><br><span class="line">=&gt; true</span><br><span class="line">irb(main):004:0&gt; user.save!</span><br><span class="line">=&gt; true</span><br></pre></td></tr></table></figure><p>至此，就可以使用自己的账号登录，并且登录上去后，会发现多了一个『admin area』平台管理的入口。</p><p><img src="http://img.iaquam.com/image/png/gitlab-admin-area1.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自行安装GitLab后，默认会有一个超级管理员账号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;username: root&lt;/li&gt;
&lt;li&gt;email: &lt;a href=&quot;mailto:admin@example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://victor87.coding.me/categories/Git/"/>
    
    
      <category term="git" scheme="http://victor87.coding.me/tags/git/"/>
    
      <category term="GitLab" scheme="http://victor87.coding.me/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Git冲突解决方案</title>
    <link href="http://victor87.coding.me/2019/01/15/Git%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://victor87.coding.me/2019/01/15/Git冲突解决方案/</id>
    <published>2019-01-15T18:17:12.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>假设多人协作是基于dev开发，每个人开发时，从dev拉取新的分支进行开发。</p><h2 id="冲突场景"><a href="#冲突场景" class="headerlink" title="冲突场景"></a>冲突场景</h2><p>假设work1从dev拉取了分支branch_work1进行开发；work2从dev拉取了分支branch_work2进行开发。</p><p>而work1先完成了代码提交，并合并到了dev上。</p><p>那么当work2完成工作后往dev合并时，如果他们两个人没有同时修改一个文件，那么work2可以顺利合并到dev上。</p><p>但是如果他们两个修改了同一个文件，这时work2进行合并到dev时，会提示『There are merge conflicts.』。这时，work2是需要先合并且手动解决冲突后，方可合并到dev上。</p><p><strong>注意：</strong></p><blockquote><p>执行冲突合并操作时，务必保证本地代码都已提交。不要没提交代码，就来执行merge/pull或者rebase操作。</p></blockquote><h2 id="解决冲突方法"><a href="#解决冲突方法" class="headerlink" title="解决冲突方法"></a>解决冲突方法</h2><h3 id="方案一：merge"><a href="#方案一：merge" class="headerlink" title="方案一：merge"></a>方案一：merge</h3><ul><li>如果branch_work2分支有多个人参与开发，那么建议采用此方法</li><li>如果当前分支含有多个提交，而且与dev分支长时间未合并同步代码，那么建议采用此方法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull origin dev // 前提是当前在branch_work2分支上</span></span><br><span class="line">手动解决冲突...</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add conflict_file // 将手动解决冲突的文件标为已解决。如果是多个文件，可分别add</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit // 提交修改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> esc :wq // 保存退出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin branch_work2 // 推到远程，用于Code Review和合并</span></span><br></pre></td></tr></table></figure><h3 id="方案二-rebase"><a href="#方案二-rebase" class="headerlink" title="方案二: rebase"></a>方案二: rebase</h3><p>如果branch_work2分支只有你一个人参与开发，那么建议采用此方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull --rebase origin dev // 前提是当前在branch_work2分支上</span></span><br><span class="line">手动解决冲突...</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add conflict_file // 将手动解决冲突的文件标为已解决。如果是多个文件，可分别add</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase --<span class="built_in">continue</span> // 继续执行rebase</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -f origin branch_work2 // 强制推到远程，用于Code Review和合并</span></span><br></pre></td></tr></table></figure><h3 id="merge-和-rebase-方案对比"><a href="#merge-和-rebase-方案对比" class="headerlink" title="merge 和 rebase 方案对比"></a>merge 和 rebase 方案对比</h3><ul><li>merge 方案不会改变历史，因此解决冲突后推送到远程时不需要加-f强制推送。但是提交历史会多一次合并提交。<br><img src="http://img.iaquam.com/image/png/merge.png" alt></li><li>rebase 方案尽管让提交树看起来很线性，没有多产生一次合并提交。但是他改变了历史，因此解决冲突后需要加-f强制推送。也正是这个原因，当别人也参与branch_work2分支开发时，不应该选用此方案，避免给其他同事带来伤害。<br><img src="http://img.iaquam.com/image/png/rebase.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;假设多人协作是基于dev开发，每个人开发时，从dev拉取新的分支进行开发。&lt;/p&gt;
&lt;h2 id=&quot;冲突场景&quot;&gt;&lt;a href=&quot;#冲突场景
      
    
    </summary>
    
      <category term="Git" scheme="http://victor87.coding.me/categories/Git/"/>
    
    
      <category term="git" scheme="http://victor87.coding.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门</title>
    <link href="http://victor87.coding.me/2018/09/22/Spring-Boot%E5%85%A5%E9%97%A8/"/>
    <id>http://victor87.coding.me/2018/09/22/Spring-Boot入门/</id>
    <published>2018-09-22T09:07:23.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架本质是通过整合现有Spring的库，提供不同场景的集成工件包，从而简化新建项目时繁杂的配置以及难以搞定依赖包版本兼容性问题。</p><ul><li>spring-boot-starter: 最基础的工件集，每个Spring Boot项目必备</li><li>spring-boot-starter-test: 测试工件集，每个Spring Boot项目初始化默认配备</li><li>spring-boot-starter-web: web开发工件集</li><li>spring-boot-devtools: 开发辅助工件集，比方说热启动开发模式。</li><li>spring-boot-starter-data-jpa, mysql-connector-java 数据持久层开发工件集(这里以MySQL为例)</li></ul><h2 id="创建一个Spring-Boot项目"><a href="#创建一个Spring-Boot项目" class="headerlink" title="创建一个Spring Boot项目"></a>创建一个Spring Boot项目</h2><h3 id="1-打开IDE-gt-Create-New-Project"><a href="#1-打开IDE-gt-Create-New-Project" class="headerlink" title="1. 打开IDE -&gt; Create New Project"></a>1. 打开IDE -&gt; Create New Project</h3><p>  <img src="http://img.iaquam.com/image/jpgSpringBootChapter1_1.png" alt="创建项目1"></p><p>  <img src="http://img.iaquam.com/image/jpgSpringBootChapter1_2.png" alt="创建项目2"></p><p>  <img src="http://img.iaquam.com/image/jpgSpringBootChapter1_3.png" alt="创建项目3"></p><p>  <img src="http://img.iaquam.com/image/jpgSpringBootChapter1_4.png" alt="创建项目4"></p><h3 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2. 项目结构"></a>2. 项目结构</h3><p>  <img src="http://img.iaquam.com/image/jpgSpringBootChapter1_5.png" alt="项目结构"></p><p>Spring Boot的基础结构共三个文件:</p><ul><li>src/main/java  程序开发以及主程序入口</li><li>src/main/resources 配置文件</li><li>src/test/java  测试程序</li></ul><h2 id="编写一个HelloWorld程序"><a href="#编写一个HelloWorld程序" class="headerlink" title="编写一个HelloWorld程序"></a>编写一个HelloWorld程序</h2><h3 id="1-添加Web开发工件集"><a href="#1-添加Web开发工件集" class="headerlink" title="1. 添加Web开发工件集"></a>1. 添加Web开发工件集</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Web开发工件集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建控制器"><a href="#2-创建控制器" class="headerlink" title="2. 创建控制器"></a>2. 创建控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wangsheng on 2018/9/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-启动应用，浏览器查看"><a href="#3-启动应用，浏览器查看" class="headerlink" title="3. 启动应用，浏览器查看"></a>3. 启动应用，浏览器查看</h3><ul><li><p>访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p><img src="http://img.iaquam.com/image/jpgSpringBootChapter1_6.png" alt="访问项目根路径"></p></li><li><p>访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><p><img src="http://img.iaquam.com/image/jpgSpringBootChapter1_7.png" alt="访问/hello路径"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架本质是通过整合现有Spring的库，提供不同场景的集成工件包，从而简化新建项目时繁杂的配置以及难以搞定依赖包版本兼容性问题。&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://victor87.coding.me/categories/Java/"/>
    
    
      <category term="微服务" scheme="http://victor87.coding.me/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Boot" scheme="http://victor87.coding.me/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>区间Range重叠算法</title>
    <link href="http://victor87.coding.me/2018/09/06/%E5%8C%BA%E9%97%B4Range%E9%87%8D%E5%8F%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://victor87.coding.me/2018/09/06/区间Range重叠算法/</id>
    <published>2018-09-06T16:42:38.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>还记得上代数课求两个连续集合是否有交集的场景么？</p><p>例如：</p><ul><li>连续集合A (2, 8)</li><li>连续集合B (6, +∞)</li></ul><p>求连续集合A和连续集合B是否有交集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                    _______________________</span><br><span class="line">      ______________|_________</span><br><span class="line">      |             |        |</span><br><span class="line">------o-------------o--------o------------&gt;</span><br><span class="line">      2             6        8</span><br></pre></td></tr></table></figure><p>我们学习时，可以通过画数轴，划范围，看两个区间是否重合区域的图像法求解。那如何通过程序，让计算机能判断这样的结果呢？</p><h2 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h2><p>数轴其实是由无数的点组成。每个连续集合是由一个起始点(特例-∞)和一个结束点组成(特例+∞)。因此要完成这个工作，底层至少需要两个类:</p><h3 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h3><ul><li>属性 value，代表数值。需要考虑特例-∞和特例+∞</li><li>属性 includeSelf，代表是否包含自身，其实就是实心点还是虚心点的区别</li></ul><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><ul><li>属性 start，代表起始点</li><li>属性 end，代表结束点</li><li>功能 hasIntersection(Range $range)，判断当前对象与传入的对象是否含有交集</li></ul><h2 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h2><h3 id="Point-类"><a href="#Point-类" class="headerlink" title="Point 类"></a>Point 类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据点对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Class Point</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> common\models\range</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正无穷</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> POSITIVE_INFINITY = <span class="string">"+"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负无穷</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> NEGATIVE_INFINITY = <span class="string">"-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> float|string 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> bool 是否包含自己</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $includeSelf = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造方法，不让外面直接new</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Point constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建有限集合点(不包含负无穷和正无穷的点)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool  $includeSelf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">builderPoint</span><span class="params">(float $value, bool $includeSelf)</span> </span>&#123;</span><br><span class="line">        $point = <span class="keyword">new</span> Point();</span><br><span class="line">        $point-&gt;value = $value;</span><br><span class="line">        $point-&gt;includeSelf = $includeSelf;</span><br><span class="line">        <span class="keyword">return</span> $point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建正无穷的点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">builderPositiveInfinityPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $point = <span class="keyword">new</span> Point();</span><br><span class="line">        $point-&gt;value = Point::POSITIVE_INFINITY;</span><br><span class="line">        $point-&gt;includeSelf = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> $point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建负无穷的点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">builderNegativeInfinityPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $point = <span class="keyword">new</span> Point();</span><br><span class="line">        $point-&gt;value = Point::NEGATIVE_INFINITY;</span><br><span class="line">        $point-&gt;includeSelf = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> $point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是负无穷的点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isNegativeInfinityPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;value === <span class="keyword">self</span>::NEGATIVE_INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是正无穷的点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isPositiveInfinityPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;value === <span class="keyword">self</span>::POSITIVE_INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Range-类"><a href="#Range-类" class="headerlink" title="Range 类"></a>Range 类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据区间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Class Range</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> common\models\range</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Range</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Point 起始点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Point 结束点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造方法，不让外面直接new</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Range constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造Range对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Point $start 起始点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Point $end 结束点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Range</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RangeInvalidException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">builderRange</span><span class="params">(Point $start, Point $end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $range = <span class="keyword">new</span> Range();</span><br><span class="line">        $range-&gt;start = $start;</span><br><span class="line">        $range-&gt;end = $end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($range-&gt;isValidRange()) &#123;</span><br><span class="line">            <span class="keyword">return</span> $range;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RangeInvalidException(<span class="string">"&#123;$range&#125;不满足数学区间定义"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前集合是否合法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool true-合法; false-非法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidRange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint() &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isPositiveInfinityPoint() &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;end-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint() &amp;&amp; !<span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;value &gt; <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="comment">// 起始点大于结束点，不合法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;value == <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="comment">// 这种说明区间是一个实心点，合法</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $result = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 起始点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">            $result .= <span class="string">"(-∞, "</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">If</span> (<span class="keyword">$this</span>-&gt;start-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            $result .= <span class="string">"(+∞, "</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;includeSelf) &#123;</span><br><span class="line">                $result .= <span class="string">"["</span> . <span class="keyword">$this</span>-&gt;start-&gt;value . <span class="string">", "</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $result .= <span class="string">"("</span> . <span class="keyword">$this</span>-&gt;start-&gt;value . <span class="string">", "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;end-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">            $result .= <span class="string">"-∞)"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">If</span> (<span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            $result .= <span class="string">"+∞)"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                $result .= <span class="keyword">$this</span>-&gt;end-&gt;value . <span class="string">"]"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $result .= <span class="keyword">$this</span>-&gt;end-&gt;value . <span class="string">")"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含交集部分</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Range $other 另一个被比较的交集对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool true-含有交集; false-不含交集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasIntersection</span><span class="params">(Range $other)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint() &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="comment">// 因为当前对象是负无穷到正无穷，所以不论other什么取值，总是会有交集的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">            <span class="comment">// 当前对象左侧到负无穷，右侧有限。这种情况，只有other在右侧才有可能没有交集</span></span><br><span class="line">            <span class="keyword">if</span> ($other-&gt;start-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;start-&gt;value == <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($other-&gt;start-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;start-&gt;value &gt; <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="comment">// 当前对象右侧到正无穷，左侧有限。这种情况，只有other在左侧，才有可能没有交集</span></span><br><span class="line">            <span class="keyword">if</span> ($other-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;end-&gt;value == <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($other-&gt;end-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;start-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;end-&gt;value &lt; <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前对象是一个有限区间</span></span><br><span class="line">            <span class="keyword">if</span> ($other-&gt;start-&gt;isNegativeInfinityPoint() &amp;&amp; $other-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">                <span class="comment">// 因为other对象是负无穷到正无穷，所以不论this什么取值，总是会有交集的</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;start-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">                <span class="comment">// other对象左侧到负无穷，右侧有限。</span></span><br><span class="line">                <span class="keyword">if</span> ($other-&gt;end-&gt;value == <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                    <span class="comment">// 判断实心点还是虚心点</span></span><br><span class="line">                    <span class="keyword">if</span> ($other-&gt;end-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;start-&gt;includeSelf) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>($other-&gt;end-&gt;value &lt; <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">                <span class="comment">// other对象右侧正无穷，左侧有限</span></span><br><span class="line">                <span class="keyword">if</span> ($other-&gt;start-&gt;value == <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                    <span class="comment">// 判断实心点还是虚心点</span></span><br><span class="line">                    <span class="keyword">if</span> ($other-&gt;start-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;start-&gt;value &gt; <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// other对象是一个有限区间</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// other对象的区间在this对象区间的左侧，才有可能没有交集</span></span><br><span class="line">                <span class="keyword">if</span> ($other-&gt;end-&gt;value == <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($other-&gt;end-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;start-&gt;includeSelf) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($other-&gt;end-&gt;value &lt; <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// other对象的区间在this对象区间的右侧，才有可能没有交集</span></span><br><span class="line">                <span class="keyword">if</span> ($other-&gt;start-&gt;value == <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($other-&gt;start-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> ($other-&gt;start-&gt;value &gt; <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 否则就有交集</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断给定的点，是否在区间内</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Point $point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool true-在区间内; false-不在区间内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isContainPoint</span><span class="params">(Point $point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint() &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="comment">// 因为当前区间是负无穷到正无穷，所以不论 $point 什么取值，总是会在区间内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;start-&gt;isNegativeInfinityPoint()) &#123;</span><br><span class="line">            <span class="comment">// 当前区间的左侧负无穷，右侧有极限。这样 $point 需要在右侧才有可能不在区间内</span></span><br><span class="line">            <span class="keyword">if</span> ($point-&gt;value == <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($point-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($point-&gt;value &gt; <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;end-&gt;isPositiveInfinityPoint()) &#123;</span><br><span class="line">            <span class="comment">// 当前区间的右侧正无穷，左侧有极限。这样 $point 需要在左侧才有可能不在区间内</span></span><br><span class="line">            <span class="keyword">if</span> ($point-&gt;value == <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($point-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;start-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($point-&gt;value &lt; <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前区间是一个有限区间</span></span><br><span class="line">            <span class="keyword">if</span> ($point-&gt;value == <span class="keyword">$this</span>-&gt;start-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($point-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;start-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($point-&gt;value == <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($point-&gt;includeSelf &amp;&amp; <span class="keyword">$this</span>-&gt;end-&gt;includeSelf) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($point-&gt;value &gt; <span class="keyword">$this</span>-&gt;start-&gt;value &amp;&amp; $point-&gt;value &lt; <span class="keyword">$this</span>-&gt;end-&gt;value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RangeInvalidException-类"><a href="#RangeInvalidException-类" class="headerlink" title="RangeInvalidException 类"></a>RangeInvalidException 类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区间非法异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Class RangeInvalidException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> common\models\range</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RangeInvalidException</span> <span class="keyword">extends</span> \<span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="测试含有重叠场景"><a href="#测试含有重叠场景" class="headerlink" title="测试含有重叠场景"></a>测试含有重叠场景</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$rangeA = Range::builderRange(Point::builderPoint(<span class="number">2</span>, <span class="keyword">false</span>), Point::builderPoint(<span class="number">8</span>, <span class="keyword">false</span>));</span><br><span class="line">dump(<span class="string">"rangeA:"</span> . $rangeA);</span><br><span class="line"></span><br><span class="line">$rangeB = Range::builderRange(Point::builderPoint(<span class="number">6</span>, <span class="keyword">false</span>), Point::builderPositiveInfinityPoint());</span><br><span class="line">dump(<span class="string">"rangeB:"</span> . $rangeB);</span><br><span class="line"></span><br><span class="line">dd(<span class="string">"rangeA hasIntersection "</span> . ($rangeA-&gt;hasIntersection($rangeB) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>));</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;rangeA:(2, 8)&quot;</span><br><span class="line">&quot;rangeB:(6, +∞)&quot;</span><br><span class="line">&quot;rangeA hasIntersection Yes&quot;</span><br></pre></td></tr></table></figure><h3 id="测试没有重叠的场景"><a href="#测试没有重叠的场景" class="headerlink" title="测试没有重叠的场景"></a>测试没有重叠的场景</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$rangeA = Range::builderRange(Point::builderPoint(<span class="number">2</span>, <span class="keyword">false</span>), Point::builderPoint(<span class="number">8</span>, <span class="keyword">false</span>));</span><br><span class="line">dump(<span class="string">"rangeA:"</span> . $rangeA);</span><br><span class="line"></span><br><span class="line">$rangeB = Range::builderRange(Point::builderPoint(<span class="number">10</span>, <span class="keyword">false</span>), Point::builderPositiveInfinityPoint());</span><br><span class="line">dump(<span class="string">"rangeB:"</span> . $rangeB);</span><br><span class="line"></span><br><span class="line">dd(<span class="string">"rangeA hasIntersection "</span> . ($rangeA-&gt;hasIntersection($rangeB) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>));</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;rangeA:(2, 8)&quot;</span><br><span class="line">&quot;rangeB:(10, +∞)&quot;</span><br><span class="line">&quot;rangeA hasIntersection No&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还记得上代数课求两个连续集合是否有交集的场景么？&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续集合A (2, 8)&lt;/li&gt;
&lt;li&gt;连续集合B (6, +∞)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求连续集合A和连续集合B是否有交集&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="PHP" scheme="http://victor87.coding.me/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://victor87.coding.me/tags/PHP/"/>
    
      <category term="Range" scheme="http://victor87.coding.me/tags/Range/"/>
    
      <category term="重叠" scheme="http://victor87.coding.me/tags/%E9%87%8D%E5%8F%A0/"/>
    
      <category term="算法" scheme="http://victor87.coding.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查找和删除重复记录</title>
    <link href="http://victor87.coding.me/2018/05/10/MySQL%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    <id>http://victor87.coding.me/2018/05/10/MySQL查找和删除重复记录/</id>
    <published>2018-05-10T18:37:55.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>人在江湖飘，岂能不挨刀。写代码的总有考虑不周的时候，出现重复记录的问题，这时候就牵扯到要清洗重复的数据，那么如何查找到重复记录，并删除呢？</p><p>下面以MySQL数据库为例，进行演示。</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>假设有一张成绩表，正常情况下每人一条成绩记录。但是不知道什么原因，有人出现多条成绩记录。</p><h3 id="创建成绩表"><a href="#创建成绩表" class="headerlink" title="创建成绩表"></a>创建成绩表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`score`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00'</span> <span class="keyword">COMMENT</span> <span class="string">'记录插入时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h3 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'张三'</span>, <span class="number">88</span>, <span class="string">'2018-05-01 08:00:13'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'李四'</span>, <span class="number">87</span>, <span class="string">'2018-05-01 12:12:13'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'王五'</span>, <span class="number">60</span>, <span class="string">'2018-05-01 18:50:23'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'麻六'</span>, <span class="number">89</span>, <span class="string">'2018-05-01 20:12:56'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span>(<span class="number">5</span>, <span class="string">'张三'</span>, <span class="number">60</span>, <span class="string">'2018-05-03 09:30:45'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span>(<span class="number">6</span>, <span class="string">'李四'</span>, <span class="number">79</span>, <span class="string">'2018-05-05 15:01:43'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`score`</span>, <span class="string">`created_at`</span>) <span class="keyword">VALUES</span>(<span class="number">7</span>, <span class="string">'王五'</span>, <span class="number">98</span>, <span class="string">'2018-05-06 19:04:57'</span>);</span><br></pre></td></tr></table></figure><h3 id="预览原数据"><a href="#预览原数据" class="headerlink" title="预览原数据"></a>预览原数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test;</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">| id | name   | score | created_at          |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">|  1 | 张三   |    88 | 2018-05-01 08:00:13 |</span><br><span class="line">|  2 | 李四   |    87 | 2018-05-01 12:12:13 |</span><br><span class="line">|  3 | 王五   |    60 | 2018-05-01 18:50:23 |</span><br><span class="line">|  4 | 麻六   |    89 | 2018-05-01 20:12:56 |</span><br><span class="line">|  5 | 张三   |    60 | 2018-05-03 09:30:45 |</span><br><span class="line">|  6 | 李四   |    79 | 2018-05-05 15:01:43 |</span><br><span class="line">|  7 | 王五   |    98 | 2018-05-06 19:04:57 |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="查询重复数据"><a href="#查询重复数据" class="headerlink" title="查询重复数据"></a>查询重复数据</h2><h3 id="统计出每个学生的成绩记录个数"><a href="#统计出每个学生的成绩记录个数" class="headerlink" title="统计出每个学生的成绩记录个数"></a>统计出每个学生的成绩记录个数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,count(*) from test group by name;</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| name   | count(*) |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| 张三   |        2 |</span><br><span class="line">| 李四   |        2 |</span><br><span class="line">| 王五   |        2 |</span><br><span class="line">| 麻六   |        1 |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="查询出成绩记录个数大于1的学生"><a href="#查询出成绩记录个数大于1的学生" class="headerlink" title="查询出成绩记录个数大于1的学生"></a>查询出成绩记录个数大于1的学生</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,count(*) from test group by name having count(*) &gt; 1;</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| name   | count(*) |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| 张三   |        2 |</span><br><span class="line">| 李四   |        2 |</span><br><span class="line">| 王五   |        2 |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="查询出含有重复记录的学生记录-重复的显示最高成绩"><a href="#查询出含有重复记录的学生记录-重复的显示最高成绩" class="headerlink" title="查询出含有重复记录的学生记录(重复的显示最高成绩)"></a>查询出含有重复记录的学生记录(重复的显示最高成绩)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from (select * from test order by score desc) as b group by name having count(name) &gt; 1;</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">| id | name   | score | created_at          |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">|  1 | 张三   |    88 | 2018-05-01 08:00:13 |</span><br><span class="line">|  2 | 李四   |    87 | 2018-05-01 12:12:13 |</span><br><span class="line">|  7 | 王五   |    98 | 2018-05-06 19:04:57 |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="查询出含有重复记录的学生记录-重复的显示最低成绩"><a href="#查询出含有重复记录的学生记录-重复的显示最低成绩" class="headerlink" title="查询出含有重复记录的学生记录(重复的显示最低成绩)"></a>查询出含有重复记录的学生记录(重复的显示最低成绩)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from (select * from test order by score asc) as b group by name having count(name) &gt; 1;</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">| id | name   | score | created_at          |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">|  5 | 张三   |    60 | 2018-05-03 09:30:45 |</span><br><span class="line">|  6 | 李四   |    79 | 2018-05-05 15:01:43 |</span><br><span class="line">|  3 | 王五   |    60 | 2018-05-01 18:50:23 |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h2><h3 id="假设对于重复成绩的人，每个人只保留最低分数"><a href="#假设对于重复成绩的人，每个人只保留最低分数" class="headerlink" title="假设对于重复成绩的人，每个人只保留最低分数"></a>假设对于重复成绩的人，每个人只保留最低分数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from test where id in (select id from (select * from test order by score desc) as b group by name having count(name) &gt; 1);</span><br><span class="line">Query OK, 3 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">| id | name   | score | created_at          |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">|  3 | 王五   |    60 | 2018-05-01 18:50:23 |</span><br><span class="line">|  4 | 麻六   |    89 | 2018-05-01 20:12:56 |</span><br><span class="line">|  5 | 张三   |    60 | 2018-05-03 09:30:45 |</span><br><span class="line">|  6 | 李四   |    79 | 2018-05-05 15:01:43 |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="假设对于重复成绩的人，每个人只保留最高分数"><a href="#假设对于重复成绩的人，每个人只保留最高分数" class="headerlink" title="假设对于重复成绩的人，每个人只保留最高分数"></a>假设对于重复成绩的人，每个人只保留最高分数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from test where id in (select id from (select * from test order by score asc) as b group by name having count(name) &gt; 1);</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">| id | name   | score | created_at          |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">|  1 | 张三   |    88 | 2018-05-01 08:00:13 |</span><br><span class="line">|  2 | 李四   |    87 | 2018-05-01 12:12:13 |</span><br><span class="line">|  4 | 麻六   |    89 | 2018-05-01 20:12:56 |</span><br><span class="line">|  7 | 王五   |    98 | 2018-05-06 19:04:57 |</span><br><span class="line">+<span class="comment">----+--------+-------+---------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人在江湖飘，岂能不挨刀。写代码的总有考虑不周的时候，出现重复记录的问题，这时候就牵扯到要清洗重复的数据，那么如何查找到重复记录，并删除呢？&lt;/p&gt;
&lt;p&gt;下面以MySQL数据库为例，进行演示。&lt;/p&gt;
&lt;h2 id=&quot;前置准备&quot;&gt;&lt;a href=&quot;#前置准备&quot; class=
      
    
    </summary>
    
      <category term="数据库" scheme="http://victor87.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://victor87.coding.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux下MySQL数据库的备份和还原</title>
    <link href="http://victor87.coding.me/2018/05/08/Linux%E4%B8%8BMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/"/>
    <id>http://victor87.coding.me/2018/05/08/Linux下MySQL数据库的备份和还原/</id>
    <published>2018-05-08T18:54:25.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>对于生产的数据，做好定时备份是保证数据安全的必要措施。一旦出现数据丢失或者误删除，可用最近的一次备份，做数据还原。从而将数据的损失降低到最低。</p><h2 id="常用的备份命令"><a href="#常用的备份命令" class="headerlink" title="常用的备份命令"></a>常用的备份命令</h2><h3 id="1-备份单个数据库"><a href="#1-备份单个数据库" class="headerlink" title="1. 备份单个数据库"></a>1. 备份单个数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hhost -uusername -ppassword dbname &gt; /path_to_backup/backup_name.sql</span><br></pre></td></tr></table></figure><p>备份并压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hhost -uusername -ppassword dbname ｜ gzip &gt; /path_to_backup/backup_name.sql.gz</span><br></pre></td></tr></table></figure><h3 id="2-备份多个数据库"><a href="#2-备份多个数据库" class="headerlink" title="2. 备份多个数据库"></a>2. 备份多个数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hhost -uusername -ppassword databases dbname1 dbname2 dbname3 &gt; /path_to_backup/backup_name.sql</span><br></pre></td></tr></table></figure><h3 id="3-备份单个数据库里指定表的数据"><a href="#3-备份单个数据库里指定表的数据" class="headerlink" title="3. 备份单个数据库里指定表的数据"></a>3. 备份单个数据库里指定表的数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hhost -uusername -ppassword dbname table1 table2 table3 &gt; /path_to_backup/backup_name.sql</span><br></pre></td></tr></table></figure><h3 id="4-仅备份数据库的结构"><a href="#4-仅备份数据库的结构" class="headerlink" title="4. 仅备份数据库的结构"></a>4. 仅备份数据库的结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -no-data -databases dbname &gt; /path_to_backup/backup_name.sql</span><br></pre></td></tr></table></figure><h3 id="5-备份所有的数据库"><a href="#5-备份所有的数据库" class="headerlink" title="5. 备份所有的数据库"></a>5. 备份所有的数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -all-databases &gt; /path_to_backup/backup_name.sql</span><br></pre></td></tr></table></figure><h2 id="常用的还原命令"><a href="#常用的还原命令" class="headerlink" title="常用的还原命令"></a>常用的还原命令</h2><h3 id="1-使用无压缩的数据备份文件还原"><a href="#1-使用无压缩的数据备份文件还原" class="headerlink" title="1. 使用无压缩的数据备份文件还原"></a>1. 使用无压缩的数据备份文件还原</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql －hhost -uusername -ppassword dbname &lt; /path_to_backup/backup_name.sql</span><br></pre></td></tr></table></figure><h3 id="2-使用已压缩的数据备份文件还原"><a href="#2-使用已压缩的数据备份文件还原" class="headerlink" title="2. 使用已压缩的数据备份文件还原"></a>2. 使用已压缩的数据备份文件还原</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip &lt; /path_to_backup/backup_name.sql.gz | mysql -hhost -uusername -ppassword dbname</span><br></pre></td></tr></table></figure><p>一键迁移到新数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump －hhost -uusername -ppassword dbname | mysql -hnew_host -uusername -ppassword -C dbname</span><br></pre></td></tr></table></figure><h2 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h2><p>以上的操作完全是手工操作，在实际生产环境不现实。因此需要做成定时自动备份的，这时就可以借助于Linux上的Crontab来实现。</p><h3 id="1-创建备份脚本"><a href="#1-创建备份脚本" class="headerlink" title="1. 创建备份脚本"></a>1. 创建备份脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is a mysql database backup shell script <span class="keyword">for</span> aquarium database.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> mysql info</span></span><br><span class="line">hostname="localhost"</span><br><span class="line">username="xxx"</span><br><span class="line">password="xxx"</span><br><span class="line">database="xxx"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> backup info</span></span><br><span class="line">backup_path="/path/to/backup"</span><br><span class="line">date=$(date +%Y%m%d_%H%M%S)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> execute backup</span></span><br><span class="line">if [ ! -d $backup_path ]; then</span><br><span class="line">  mkdir -p $backup_path</span><br><span class="line">fi</span><br><span class="line">mysqldump -h$hostname -u$username -p$password $database | gzip &gt; $backup_path/$database_$date.sql.gz</span><br></pre></td></tr></table></figure><h3 id="2-创建定时任务"><a href="#2-创建定时任务" class="headerlink" title="2. 创建定时任务"></a>2. 创建定时任务</h3><p>键入 <code>crontab -e</code> 进入编辑模式，加入下面一行内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加定时计划，例如：每天凌晨2点执行</span></span><br><span class="line">0 2 * * * /path/to/backup.sh</span><br></pre></td></tr></table></figure><p><code>:wq</code> 保存退出。</p><p>至此，自动定时备份已经完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于生产的数据，做好定时备份是保证数据安全的必要措施。一旦出现数据丢失或者误删除，可用最近的一次备份，做数据还原。从而将数据的损失降低到最低。&lt;/p&gt;
&lt;h2 id=&quot;常用的备份命令&quot;&gt;&lt;a href=&quot;#常用的备份命令&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="数据库" scheme="http://victor87.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Linux" scheme="http://victor87.coding.me/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://victor87.coding.me/tags/MySQL/"/>
    
      <category term="备份" scheme="http://victor87.coding.me/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="还原" scheme="http://victor87.coding.me/tags/%E8%BF%98%E5%8E%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android Things环境搭建</title>
    <link href="http://victor87.coding.me/2017/12/17/Android-Things%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://victor87.coding.me/2017/12/17/Android-Things环境搭建/</id>
    <published>2017-12-17T15:37:10.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>本教程中，以Pico Pro Maker Kit(不包含彩虹帽Rainbow HAT)为例介绍。<br><img src="http://img.iaquam.com/image/Pico%20Pro.jpeg" alt="Pico Pro Maker Kit"></p><h2 id="所含套件"><a href="#所含套件" class="headerlink" title="所含套件"></a>所含套件</h2><ul><li>① Pico i.MX7 双核开发板</li><li>④ USB-C线</li><li>⑤ Wifi天线</li><li>⑥ 天线延长线</li><li>⑦ 摄像头</li><li>⑧ 摄像头视频线</li><li>⑨ 5寸多点触控显示屏</li><li>⑩ 显示屏6线电缆</li></ul><p><img src="https://developer.android.com/things/images/imx7d-kit/inventory.jpg" alt="components"></p><p>注: 我的不包含彩虹帽想关部件。</p><h2 id="连接部件"><a href="#连接部件" class="headerlink" title="连接部件"></a>连接部件</h2><h3 id="Wifi天线"><a href="#Wifi天线" class="headerlink" title="Wifi天线"></a>Wifi天线</h3><ol><li><p>连接Wifi天线和天线延长线<br><img src="https://developer.android.com/things/images/imx7d-kit/antenna_step1.jpg" alt="connect wifi antenna"></p></li><li><p>将延长线另一端的小圆帽扣到图中制定位置上。<br><img src="https://developer.android.com/things/images/imx7d-kit/antenna_step2.jpg" alt="fixed antenna cable to board"></p></li></ol><h3 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h3><ol><li><p>手握主板，旋转右侧中间黑色固定边框，边框旋转起来后，右手将将视频线一端插入里面，最后将黑色边框再旋转下来，压紧视频线。<br><img src="https://developer.android.com/things/images/imx7d-kit/camera_step1.jpg" alt="Camera connect 1"></p></li><li><p>左手握视频线另一端，右手握蛇形头模块，并旋转起黑色边框，将视频线另一端插入，同样最后将黑色边框再旋转下来，压紧视频线。<br><img src="https://developer.android.com/things/images/imx7d-kit/camera_step2.jpg" alt="Camera connect 2"></p></li></ol><h3 id="多点触控屏"><a href="#多点触控屏" class="headerlink" title="多点触控屏"></a>多点触控屏</h3><ol><li><p>将主板背面朝上，并将黑色边框旋转起来。<br><img src="https://developer.android.com/things/images/imx7d-kit/display_step1.jpg" alt="Display connect 1"></p></li><li><p>将显示屏背面朝上，然后将视频线另一端插入卡槽，然后将黑色边框再旋转下来，压紧视频线。<br><img src="https://developer.android.com/things/images/imx7d-kit/display_step2.jpg" alt="Display connect 2"></p></li><li><p>将6线电缆一端插入图中的位置。<br><img src="https://developer.android.com/things/images/imx7d-kit/display_step3.jpg" alt="Display connect 3"></p></li><li><p>将主板和显示屏都调整为正面朝上，然后将6线电缆另一端插入图中位置<br><img src="https://developer.android.com/things/images/imx7d-kit/display_step4.jpg" alt="Display connect 4"></p></li></ol><h3 id="最终谍照"><a href="#最终谍照" class="headerlink" title="最终谍照"></a>最终谍照</h3><p><img src="http://img.iaquam.com/image/Pico%20Pro%20connected.jpeg" alt="final result"></p><p>如果你的开发板包含彩虹帽，可参考<a href="https://developer.android.com/things/hardware/imx7d-kit.html#connect_the_parts" target="_blank" rel="noopener">官方连接教程</a></p><h2 id="安装-Android-Things"><a href="#安装-Android-Things" class="headerlink" title="安装 Android Things"></a>安装 Android Things</h2><h3 id="NXP-i-MX7D-介绍"><a href="#NXP-i-MX7D-介绍" class="headerlink" title="NXP i.MX7D 介绍"></a>NXP i.MX7D 介绍</h3><p>The i.MX 7Dual delivers high-performance processing for low-power requirements with a high degree of functional integration. The i.MX 7Dual features an advanced implementation of two ARM®Cortex®-A7 cores, which operate at speeds of up to 1.2 GHz, as well as the ARM® Cortex®-M4 core. The Pico variant is pin-compatible with the Intel® Edison for sensors and low-speed I/O, but also adds additional expansion possibilities for multimedia and connectivity, giving you cutting edge technology that can easily be expanded and implemented for IoT designs.</p><p><img src="https://developer.android.com/things/images/nxp-pico7-board.png" alt="NXP i.MX7D Board"></p><h3 id="刷入镜像"><a href="#刷入镜像" class="headerlink" title="刷入镜像"></a>刷入镜像</h3><h4 id="1-硬件连接"><a href="#1-硬件连接" class="headerlink" title="(1). 硬件连接"></a>(1). 硬件连接</h4><ol><li><p>通过Type-C线，给主板上电<br><img src="https://developer.android.com/things/images/pico7-connections.png" alt="power on"></p></li><li><p>网络连接<br>这里强烈建议你将主板接入互联网，这样你的设备crash信息将会自动上报，同时也可以收到更新提示。</p><ul><li>通过网线上网</li><li>通过Wi-Fi上网，这里需要你将Wifi天线接入主板<br><img src="https://developer.android.com/things/images/pico7-antenna.png" alt="wifi antenna"></li></ul></li></ol><h4 id="2-刷入Android-Things"><a href="#2-刷入Android-Things" class="headerlink" title="(2). 刷入Android Things"></a>(2). 刷入Android Things</h4><ol><li>从 <a href="https://partner.android.com/things/console/#/tools" target="_blank" rel="noopener">Android Things Console</a>下载Android Things启动工具。这里需要你登录Google账号，并接受服务条款。(注:自备梯子)<br><img src="https://developer.android.com/things/images/console/setup-utility.png" alt="console"></li><li>解压下载的zip包</li><li>启动设置工具<ul><li>Windows 双击可执行文件</li><li>Mac/Linux 在终端执行命令</li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/Downloads/android-things-setup-utility/android-things-setup-utility-macos</span></span><br><span class="line"></span><br><span class="line">Android Things Setup Utility (version 1.0.16)</span><br><span class="line">============================</span><br><span class="line">This tool will help you install Android Things on your board and set up Wi-Fi.</span><br><span class="line"></span><br><span class="line">What do you want to do?</span><br><span class="line">1 - Install Android Things and optionally set up Wi-Fi</span><br><span class="line">2 - Set up Wi-Fi on an existing Android Things device</span><br><span class="line">1</span><br><span class="line">What hardware are you using?</span><br><span class="line">1 - Raspberry Pi 3</span><br><span class="line">2 - NXP Pico i.MX7D</span><br><span class="line">3 - NXP Pico i.MX6UL</span><br><span class="line">2</span><br><span class="line">You chose NXP Pico i.MX7D.</span><br><span class="line"></span><br><span class="line">Setting up required tools...</span><br><span class="line">Fetching additional configuration...</span><br><span class="line">Downloading platform tools...</span><br><span class="line">File already downloaded.</span><br><span class="line">Unzipping platform tools...</span><br><span class="line">Finished setting up required tools.</span><br><span class="line"></span><br><span class="line">Do you want to use the default image or a custom image?</span><br><span class="line">1 - Default image: Used for development purposes. No access to the Android</span><br><span class="line">Things Console features such as metrics, crash reports, and OTA updates.</span><br><span class="line">2 - Custom image: Provide your own image, enter the path to an image generated</span><br><span class="line">and from the Android Things Console.</span><br><span class="line">2</span><br><span class="line">Please enter the absolute path to the zip file containing your image:</span><br><span class="line">/Users/wangsheng/Downloads/Victor_NXP Pico i.MX7D_1_userdebug_build.zip</span><br><span class="line"></span><br><span class="line">Connect your device to this computer:</span><br><span class="line">The USB cable should plug into your board's USB-C port. If your computer also</span><br><span class="line">has USB-C ports like the more recent MacBooks, you will need to use a USB hub.</span><br><span class="line">Otherwise the board won't power on correctly.</span><br><span class="line"></span><br><span class="line">Once connected, press [Enter] to install Android Things on the device...</span><br><span class="line"></span><br><span class="line">Looking for devices... This can take up to 3 minutes.</span><br><span class="line">found device</span><br><span class="line">Unzipping image...</span><br><span class="line">Flashing Android Things. This will take a few minutes...</span><br><span class="line">*Do not disconnect or interrupt!*</span><br><span class="line"></span><br><span class="line">target reported max download size of 419430400 bytes</span><br><span class="line">sending 'bootloader' (559 KB)...</span><br><span class="line">OKAY [  0.018s]</span><br><span class="line">......</span><br><span class="line">rebooting...</span><br><span class="line"></span><br><span class="line">finished. total time: 134.454s</span><br><span class="line">Creating filesystem with parameters:</span><br><span class="line">    Size: 1930952704</span><br><span class="line">    Block size: 4096</span><br><span class="line">    Blocks per group: 32768</span><br><span class="line">    Inodes per group: 7872</span><br><span class="line">    Inode size: 256</span><br><span class="line">    Journal blocks: 7366</span><br><span class="line">    Label:</span><br><span class="line">    Blocks: 471424</span><br><span class="line">    Block groups: 15</span><br><span class="line">    Reserved block group size: 119</span><br><span class="line">Created filesystem with 11/118080 inodes and 15505/471424 blocks</span><br><span class="line"></span><br><span class="line">Successfully flashed your imx7d.</span><br><span class="line">Successfully flashed Android Things...</span><br><span class="line">Would you like to set up Wi-Fi on this device? (y/n)</span><br></pre></td></tr></table></figure><p>这里可以选择n，完成Android Things刷入。然后通过屏幕UI界面，来设计Wi-Fi网络。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://img.iaquam.com/image/Android%20Things%20UI1.jpeg" alt="Android Things run1"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI2.jpeg" alt="Android Things run2"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI3.jpeg" alt="Android Things run3"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI4.jpeg" alt="Android Things run4"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI5.jpeg" alt="Android Things run5"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI6.jpeg" alt="Android Things run6"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI7.jpeg" alt="Android Things run7"><br><img src="http://img.iaquam.com/image/Android%20Things%20UI8.jpeg" alt="Android Things run8"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程中，以Pico Pro Maker Kit(不包含彩虹帽Rainbow HAT)为例介绍。&lt;br&gt;&lt;img src=&quot;http://img.iaquam.com/image/Pico%20Pro.jpeg&quot; alt=&quot;Pico Pro Maker Kit&quot;&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="IoT" scheme="http://victor87.coding.me/categories/IoT/"/>
    
    
      <category term="Android Things" scheme="http://victor87.coding.me/tags/Android-Things/"/>
    
      <category term="物联网" scheme="http://victor87.coding.me/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="NXP i.MX7D" scheme="http://victor87.coding.me/tags/NXP-i-MX7D/"/>
    
  </entry>
  
  <entry>
    <title>Android Things介绍</title>
    <link href="http://victor87.coding.me/2017/12/16/AndroidThings%E4%BB%8B%E7%BB%8D/"/>
    <id>http://victor87.coding.me/2017/12/16/AndroidThings介绍/</id>
    <published>2017-12-16T12:54:39.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>PC、智能手机时代已过去，接下来进入的是一个万物联网的时代，即物联网时代。<br><img src="http://img4.iyiou.com/Editor/image/20161012/1476262106932494.jpg" alt="IoT增长"></p><p>从图中不难看出物联网的量级要远远超过之前的PC和智能手机数量。因此 <a href="https://google.com" target="_blank" rel="noopener">Google</a>自然不甘错失机会，推出了 <a href="https://developer.android.com/things/get-started/index.html" target="_blank" rel="noopener">Android Things</a>。</p><p>Android Things是一个可以用来构建专业的、大众消费品的可信赖平台，同时该平台不需要多年的嵌入系统设计经验。它减少了大量的前期开发成本，同时减少了验证想法是否具有现实可操作性的风险。当你准备大批量产设备时，你的成本也会线性增长，而正在进行的工程和测试成本会随着谷歌提供的更新越来越小。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>目前与Google合作提供Android Things SoMs认证以及载板的合作伙伴有：</p><ul><li>集成部分 - SoMs集成了SoC (System-on-chip), RAM, flash storage, WiFi, Bluetooth和其它组件于单一板子上，并且通过了所有FCC需要的认证。当你需要批量生产时，你可以通过将现有模块扁平化到PCB上来优化你的电路板设计，从而节省成本和空间。</li><li>Google BSP - 板载支持包受到Google的管理，提供标准的更新以及Bug修复，从而给开发者一个可信赖的平台。</li><li>差异化的硬件 - Google的合作伙伴提供携带不同SoMs和形式因素来满足你的需要，让你的选择更灵活。</li></ul><p>查看SoMs以及板载 <a href="https://developer.android.com/things/hardware/index.html" target="_blank" rel="noopener">开发工具</a></p><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><p>Android Things继承Android框架的核心，并额外提供移动设备所不具备的的Things支持库。</p><p><img src="https://developer.android.com/things/images/platform-architecture.png" alt="Android Things Framework"></p><p>相移动设备来说，开发嵌入系统的App主要有以下几个不点：</p><ul><li>比移动设备更灵活的访问外围设备和驱动</li><li>移除系统应用，从而优化启动和存储需要</li><li>设备启动时App自动打开，让用户沉浸在应用程序体验中</li><li>不像移动设备那样给用户提供了多个App，而Android Things设备只暴露一个应用给用户</li></ul><p>想了解更多Android Things与Android框架的相似和区别，可访问<a href="https://developer.android.com/things/sdk/index.html" target="_blank" rel="noopener">SDK Overview</a></p><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><p><img src="https://developer.android.com/things/images/console/console-home.png" alt="Android Things Console"></p><p>Android Things控制台提供了安装和更新系统镜像的工具，供你开始构建原型和设备。控制台支持你推送OTA给指定用户和设备。</p><ul><li>下载和安装最新的 Android Things 系统镜像</li><li>构建包含OEM应用的生产镜像</li><li>推送包含OEM应用和系统镜像的 OTA 更新</li></ul><p>了解更多特性，可访问 <a href="https://developer.android.com/things/console/index.html" target="_blank" rel="noopener">Console document</a></p><p>想上手把玩下Android Things，可访问 <a href="http://victor87.coding.me/2017/12/17/Android-Things%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Android Things环境搭建</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PC、智能手机时代已过去，接下来进入的是一个万物联网的时代，即物联网时代。&lt;br&gt;&lt;img src=&quot;http://img4.iyiou.com/Editor/image/20161012/1476262106932494.jpg&quot; alt=&quot;IoT增长&quot;&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="IoT" scheme="http://victor87.coding.me/categories/IoT/"/>
    
    
      <category term="Android Things" scheme="http://victor87.coding.me/tags/Android-Things/"/>
    
      <category term="物联网" scheme="http://victor87.coding.me/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Mosquitto PHP扩展</title>
    <link href="http://victor87.coding.me/2017/11/30/Mosquitto-PHP%E6%89%A9%E5%B1%95/"/>
    <id>http://victor87.coding.me/2017/11/30/Mosquitto-PHP扩展/</id>
    <published>2017-11-30T11:57:51.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>上篇<a href="http://victor87.coding.me/2017/11/29/Mosquitto%E5%AE%89%E8%A3%85/">Mosquitto安装</a>介绍了如何安装以及命令行使用Mosquitto，那么PHP里如何调用Mosquitto呢？这篇文章将介绍PHP与Mosquitto的集成。</p><h2 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h2><p><a href="https://github.com/mgdm/Mosquitto-PHP" target="_blank" rel="noopener">Mosquitto-PHP</a> is A wrapper for the Eclipse Mosquitto™ MQTT client library for PHP.</p><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>PHP 5.3+</li><li>libmosquitto 1.2.x or later</li><li>Mac or Linux</li></ul><p>注：感谢<a href="https://twitter.com/SaraMG" target="_blank" rel="noopener">Sara Golemon</a>的贡献，使<a href="https://pecl.php.net/package-changelog.php?package=Mosquitto&amp;release=0.4.0" target="_blank" rel="noopener">pecl-mosquitto-v0.4.0</a>已经支持PHP 7。</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>首先需要安装libmosquitto开发包，Red Hat系列的包名: <code>libmosquitto-devel</code>，Debian或者Ubuntu系列的包名: <code>libmosquitto-dev</code>。</p><p>以下以Centos 7.x为例:</p><h4 id="1-安装-Mosquitto-开发包"><a href="#1-安装-Mosquitto-开发包" class="headerlink" title="1. 安装 Mosquitto 开发包"></a>1. 安装 Mosquitto 开发包</h4><p>如果像我一样，找不到<code>libmosquitto-devel</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# yum search libmosquitto-devel</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.shuosc.org</span><br><span class="line"> * epel: mirrors.tongji.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.shuosc.org</span><br><span class="line"> * webtatic: sp.repo.webtatic.com</span><br><span class="line">警告：没有匹配 libmosquitto-devel 的软件包</span><br><span class="line">No matches found</span><br></pre></td></tr></table></figure><p>可以添加含有MQTT的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# cd /etc/yum.repos.d/</span><br><span class="line">[root@192 yum.repos.d]# wget http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/home:oojah:mqtt.repo</span><br><span class="line">[root@192 yum.repos.d]# yum makecache</span><br></pre></td></tr></table></figure><p>然后执行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# yum install libmosquitto-devel</span><br></pre></td></tr></table></figure><h4 id="2-安装-Mosquitto-PHP扩展"><a href="#2-安装-Mosquitto-PHP扩展" class="headerlink" title="2. 安装 Mosquitto PHP扩展"></a>2. 安装 Mosquitto PHP扩展</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# pecl install Mosquitto-0.4.0</span><br></pre></td></tr></table></figure><p>这个提示直接按回车，自动探测就行。</p><blockquote><p>Please provide the prefix of the libmosquitto installation [autodetect] :</p></blockquote><p>成功提示：</p><blockquote><p>Build process completed successfully<br>Installing ‘/usr/lib64/php/modules/mosquitto.so’<br>install ok: channel://pecl.php.net/Mosquitto-0.4.0<br>configuration option “php_ini” is not set to php.ini location<br>You should add “extension=mosquitto.so” to php.ini</p></blockquote><h4 id="3-配置-php-ini-文件"><a href="#3-配置-php-ini-文件" class="headerlink" title="3. 配置 php.ini 文件"></a>3. 配置 php.ini 文件</h4><p>添加如下一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=mosquitto.so</span><br></pre></td></tr></table></figure><h2 id="演示示例"><a href="#演示示例" class="headerlink" title="演示示例"></a>演示示例</h2><p>本例子中Mosquitto的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto version 1.4.14 (build date 2017-09-14 18:40:30+0000)</span><br></pre></td></tr></table></figure><h3 id="1-无认证方式"><a href="#1-无认证方式" class="headerlink" title="1. 无认证方式"></a>1. 无认证方式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$client = <span class="keyword">new</span> Mosquitto\Client;</span><br><span class="line">$client-&gt;onConnect(<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($client)</span> </span>&#123;</span><br><span class="line">    $client-&gt;publish(<span class="string">'victor/test'</span>, <span class="string">'Hello World.'</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$client-&gt;connect(<span class="string">'127.0.0.1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</span><br><span class="line">    <span class="comment">// 使用Loop循环来让Mosquitto处理自身事物</span></span><br><span class="line">    $client-&gt;loop(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Finished\n"</span>;</span><br></pre></td></tr></table></figure><h3 id="2-认证方式"><a href="#2-认证方式" class="headerlink" title="2. 认证方式"></a>2. 认证方式</h3><p>只需添加一行认证代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加认证信息</span></span><br><span class="line">$client-&gt;setCredentials(<span class="string">'test'</span>, <span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure><p>更多Mosquitto-PHP用法，参见 <a href="https://mosquitto-php.readthedocs.io/en/latest/" target="_blank" rel="noopener">Mosquitto-PHP-docs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇&lt;a href=&quot;http://victor87.coding.me/2017/11/29/Mosquitto%E5%AE%89%E8%A3%85/&quot;&gt;Mosquitto安装&lt;/a&gt;介绍了如何安装以及命令行使用Mosquitto，那么PHP里如何调用Mosquitto呢
      
    
    </summary>
    
      <category term="IoT" scheme="http://victor87.coding.me/categories/IoT/"/>
    
    
      <category term="物联网" scheme="http://victor87.coding.me/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="PHP" scheme="http://victor87.coding.me/tags/PHP/"/>
    
      <category term="MQTT" scheme="http://victor87.coding.me/tags/MQTT/"/>
    
      <category term="Mosquitto" scheme="http://victor87.coding.me/tags/Mosquitto/"/>
    
      <category term="消息队列" scheme="http://victor87.coding.me/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Mosquitto安装</title>
    <link href="http://victor87.coding.me/2017/11/29/Mosquitto%E5%AE%89%E8%A3%85/"/>
    <id>http://victor87.coding.me/2017/11/29/Mosquitto安装/</id>
    <published>2017-11-29T16:24:02.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/mosquitto" target="_blank" rel="noopener">Mosquitto</a>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，提供轻量级的，支持可发布/可订阅的的消息推送模式，使设备对设备之间的短消息通信变得简单，比如现在应用广泛的低功耗传感器，手机、嵌入式计算机、微型控制器等移动设备。一个典型的应用案例就是 Andy Stanford-ClarkMosquitto（MQTT协议创始人之一）在家中实现的远程监控和自动化。并在 OggCamp 的演讲上，对MQTT协议进行详细阐述。</p><p>为每个MQTT消息头命令消息包含一个固定头，头只有两个字节，格式如下：<br><img src="http://upload-images.jianshu.io/upload_images/2196419-e37a07c5eb9c558a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="MQTT-head"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>以Centos7.x为例</p><h3 id="如果你服务器源里是-1-4-13-版本的-Mosquitto"><a href="#如果你服务器源里是-1-4-13-版本的-Mosquitto" class="headerlink" title="如果你服务器源里是 1.4.13 版本的 Mosquitto"></a>如果你服务器源里是 1.4.13 版本的 Mosquitto</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install mosquitto</span></span><br></pre></td></tr></table></figure><h3 id="如果你服务器源里是-1-4-14-版本的-Mosquitto"><a href="#如果你服务器源里是-1-4-14-版本的-Mosquitto" class="headerlink" title="如果你服务器源里是 1.4.14 版本的 Mosquitto"></a>如果你服务器源里是 1.4.14 版本的 Mosquitto</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install mosquitto mosquitto-clients</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/home:oojah:mqtt.repo" target="_blank" rel="noopener">含有Mosquitto-v1.4.14版本的源</a></p></blockquote><p>Mac用户可以通过Homebrew安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install mosquitto</span></span><br></pre></td></tr></table></figure><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><p>打开两个终端，一个模拟接收者，一个模拟发送者</p><h3 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mosquitto_sub -t topic_test</span></span><br></pre></td></tr></table></figure><h3 id="发送者"><a href="#发送者" class="headerlink" title="发送者"></a>发送者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mosquitto_pub -t topic_test -m <span class="string">"Hello World."</span></span></span><br></pre></td></tr></table></figure><p>这时候，接收者就会收到<code>Hello World.</code>的消息：</p><blockquote><p>[root@192 ~]# mosquitto_sub -t topic_test<br>Hello World.</p></blockquote><h2 id="使用客户端工具来模拟收发"><a href="#使用客户端工具来模拟收发" class="headerlink" title="使用客户端工具来模拟收发"></a>使用客户端工具来模拟收发</h2><p>这里介绍一款Chrome插件 <code>MQTTBox</code></p><h3 id="配置如下"><a href="#配置如下" class="headerlink" title="配置如下"></a>配置如下</h3><p><img src="http://img.iaquam.com/image/mqttbox_setting.png" alt="MQTTBox-setting"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加一个订阅者<br><img src="http://img.iaquam.com/image/add_subscriber.png" alt="add-subscriber"></p><p>添加一个发布者<br><img src="http://img.iaquam.com/image/add_publisher.png" alt="add-publisher"></p><p>点击发布<br><img src="http://img.iaquam.com/image/mqttbox_publish.png" alt="publish"></p><h2 id="用户名密码认证"><a href="#用户名密码认证" class="headerlink" title="用户名密码认证"></a>用户名密码认证</h2><p>(1) 使用<code>Mosquitto</code>自带的<code>mosquitto_passwd</code>命令创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mosquitto_passwd -c /etc/mosquitto/pwfile <span class="built_in">test</span></span></span><br><span class="line">Password:</span><br><span class="line">Reenter password:</span><br></pre></td></tr></table></figure><p>(2) 编辑<code>/etc/mosquitto/mosquitto.conf</code>配置文件，修改如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_anonymous false</span><br><span class="line">password_file /etc/mosquitto/pwfile</span><br></pre></td></tr></table></figure><p>(3) 重启mosquitto</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart mosquitto</span></span><br></pre></td></tr></table></figure><p>这时候如果要测试发布和订阅，就需要设置用户名和密码了<br><img src="http://img.iaquam.com/image/mqttbox_setting_login.png" alt="MQTTBox-setting-login"></p><h2 id="ACL-基于Topic的访问控制"><a href="#ACL-基于Topic的访问控制" class="headerlink" title="ACL 基于Topic的访问控制"></a>ACL 基于Topic的访问控制</h2><p>Mosquitto安装完毕，默认包含一个aclfile.example的配置文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># This affects access control for clients with no username.</span><br><span class="line">topic read $SYS/#</span><br><span class="line"></span><br><span class="line"># This only affects clients with username &quot;roger&quot;.</span><br><span class="line">user roger</span><br><span class="line">topic foo/bar</span><br><span class="line"></span><br><span class="line"># This affects all clients.</span><br><span class="line">pattern write $SYS/broker/connection/%c/state</span><br></pre></td></tr></table></figure><p>配置文件包含三种形式的访问配置：</p><ul><li>第一段这种形式的声明，会影响到没有不含用户名的访问权限</li><li>第二段这种包含user的声明，会影响到具体指定用户的访问权限。这里user指令后面的用户需要是 pwfile 包含的用户。另外，topic [read|write|readwrite] <topic> 这里有读、写、读写三种权限，分别代表客户端对topic的订阅、发布、订阅和发布。如果不写中间的读写权限，则等同于readwrite权限。</topic></li><li>第三段这种形式的声明，使用topic规则来验证，如果topic跟pattern里的匹配，则拥有该权限<ul><li><code>%c</code> 匹配客户端ID</li><li><code>%u</code> 匹配客户端用户名</li></ul></li></ul><h3 id="配置ACL"><a href="#配置ACL" class="headerlink" title="配置ACL"></a>配置ACL</h3><h4 id="1-开启ACL"><a href="#1-开启ACL" class="headerlink" title="1. 开启ACL"></a>1. 开启ACL</h4><p>修改配置文件mosquitto.conf，添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># config topic access control</span><br><span class="line">acl_file /etc/mosquitto/aclfile</span><br></pre></td></tr></table></figure><h4 id="2-编辑acl配置"><a href="#2-编辑acl配置" class="headerlink" title="2. 编辑acl配置"></a>2. 编辑acl配置</h4><p>基于/etc/mosquitto/aclfile.example，复制一份，命名为/etc/mosquitto/aclfile。然后进行授权编辑。以下是我的测试配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># admin acl</span><br><span class="line">user admin</span><br><span class="line">topic readwrite /building/#</span><br><span class="line"></span><br><span class="line"># sensor acl</span><br><span class="line">user sensor</span><br><span class="line">topic write /building/sensor/upload</span><br><span class="line">topic read /building/sensor/fetch</span><br><span class="line"></span><br><span class="line"># cloud acl</span><br><span class="line">user cloud</span><br><span class="line">topic read /building/sensor/upload</span><br><span class="line">topic write /building/sensor/fetch</span><br></pre></td></tr></table></figure><p>示例解析：</p><ul><li>admin具有 <code>/building/#</code> 订阅和发布的权限</li><li>sensor具有 <code>/building/sensor/upload</code> 发布的权限，以及 <code>/building/sensor/fetch</code> 订阅的权限</li><li>cloud具有 <code>/building/sensor/upload</code> 订阅的权限，以及 <code>/building/sensor/fetch</code> 发布的权限</li></ul><p>也就是说，admin拥有整个建筑里数据访问协议；sensor拥有上传数据，以及接受云端指令的权限；admin有接受传感器数据和发布收集传感器数据指令的权限。这样即保证了整体的工作流程不受影响，也保证了账号独立，权限独立。</p><h4 id="3-重新加载mosquitto，使acl配置生效"><a href="#3-重新加载mosquitto，使acl配置生效" class="headerlink" title="3. 重新加载mosquitto，使acl配置生效"></a>3. 重新加载mosquitto，使acl配置生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl reload mosquitto</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ul><li>如果开启acl，假设用户zhangsan存在于pwfile文件中，但是在aclfile里没有进行任何授权配置，那么默认是没有任何topic的订阅和发布权限。</li><li>另外，有一点比较坑，如果一个账户因为acl验证不通过，那么client收不到任何关于订阅失败或者发布失败的消息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/mosquitto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mosquitto&lt;/a&gt;是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，提供轻量级的，支持可发
      
    
    </summary>
    
      <category term="IoT" scheme="http://victor87.coding.me/categories/IoT/"/>
    
    
      <category term="物联网" scheme="http://victor87.coding.me/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="MQTT" scheme="http://victor87.coding.me/tags/MQTT/"/>
    
      <category term="Mosquitto" scheme="http://victor87.coding.me/tags/Mosquitto/"/>
    
      <category term="消息队列" scheme="http://victor87.coding.me/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="权限认证" scheme="http://victor87.coding.me/tags/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>Systemd 实战篇</title>
    <link href="http://victor87.coding.me/2017/11/26/Systemd-advanced/"/>
    <id>http://victor87.coding.me/2017/11/26/Systemd-advanced/</id>
    <published>2017-11-26T18:11:15.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章，我介绍了 <a href="http://victor87.coding.me/2017/11/26/Systemd-cmd/">Systemd 的主要命令</a>，今天介绍如何使用它完成一些基本的任务。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030801.jpg" alt="coding"></p><h2 id="一、开机启动"><a href="#一、开机启动" class="headerlink" title="一、开机启动"></a>一、开机启动</h2><p>对于那些支持 Systemd 的软件，安装的时候，会自动在<code>/usr/lib/systemd/system</code>目录添加一个配置文件。</p><p>如果你想让该软件开机启动，就执行下面的命令（以<code>httpd.service</code>为例）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> httpd</span></span><br></pre></td></tr></table></figure><p>上面的命令相当于在<code>/etc/systemd/system</code>目录添加一个符号链接，指向<code>/usr/lib/systemd/system</code>里面的<code>httpd.service</code>文件。</p><p>这是因为开机时，<code>Systemd</code>只执行<code>/etc/systemd/system</code>目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p><h2 id="二、启动服务"><a href="#二、启动服务" class="headerlink" title="二、启动服务"></a>二、启动服务</h2><p>设置开机启动以后，软件并不会立即启动，必须等到下一次开机。如果想现在就运行该软件，那么要执行<code>systemctl start</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start httpd</span></span><br></pre></td></tr></table></figure><p>执行上面的命令以后，有可能启动失败，因此要用<code>systemctl status</code>命令查看一下该服务的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl status httpd</span></span><br><span class="line"></span><br><span class="line">httpd.service - The Apache HTTP Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled)</span><br><span class="line">   Active: active (running) since 金 2014-12-05 12:18:22 JST; 7min ago</span><br><span class="line"> Main PID: 4349 (httpd)</span><br><span class="line">   Status: "Total requests: 1; Current requests/sec: 0; Current traffic:   0 B/sec"</span><br><span class="line">   CGroup: /system.slice/httpd.service</span><br><span class="line">           ├─4349 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─4350 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─4351 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─4352 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─4353 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           └─4354 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line"></span><br><span class="line">12月 05 12:18:22 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...</span><br><span class="line">12月 05 12:18:22 localhost.localdomain systemd[1]: Started The Apache HTTP Server.</span><br><span class="line">12月 05 12:22:40 localhost.localdomain systemd[1]: Started The Apache HTTP Server.</span><br></pre></td></tr></table></figure><p>上面的输出结果含义如下。</p><blockquote><p>Loaded行：配置文件的位置，是否设为开机启动<br>Active行：表示正在运行<br>Main PID行：主进程ID<br>Status行：由应用本身（这里是 httpd ）提供的软件当前状态<br>CGroup块：应用的所有子进程<br>日志块：应用的日志</p></blockquote><h2 id="三、停止服务"><a href="#三、停止服务" class="headerlink" title="三、停止服务"></a>三、停止服务</h2><p>终止正在运行的服务，需要执行<code>systemctl stop</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop httpd.service</span></span><br></pre></td></tr></table></figure><p>有时候，该命令可能没有响应，服务停不下来。这时候就不得不”杀进程”了，向正在运行的进程发出<code>kill</code>信号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">kill</span> httpd.service</span></span><br></pre></td></tr></table></figure><p>此外，重启服务要执行<code>systemctl restart</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart httpd.service</span></span><br></pre></td></tr></table></figure><h2 id="四、读懂配置文件"><a href="#四、读懂配置文件" class="headerlink" title="四、读懂配置文件"></a>四、读懂配置文件</h2><p>一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。<br>前面说过，配置文件主要放在<code>/usr/lib/systemd/system</code>目录，也可能在<code>/etc/systemd/system</code>目录。找到配置文件以后，使用文本编辑器打开即可。<br><code>systemctl cat</code>命令可以用来查看配置文件，下面以sshd.service文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl cat sshd.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=OpenSSH server daemon</span><br><span class="line">Documentation=man:sshd(8) man:sshd_config(5)</span><br><span class="line">After=network.target sshd-keygen.service</span><br><span class="line">Wants=sshd-keygen.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/etc/sysconfig/sshd</span><br><span class="line">ExecStart=/usr/sbin/sshd -D $OPTIONS</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">Type=simple</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>可以看到，配置文件分成几个区块，每个区块包含若干条键值对。</p><p>下面依次解释每个区块的内容。</p><h2 id="五、-Unit-区块：启动顺序与依赖关系。"><a href="#五、-Unit-区块：启动顺序与依赖关系。" class="headerlink" title="五、 [Unit] 区块：启动顺序与依赖关系。"></a>五、 [Unit] 区块：启动顺序与依赖关系。</h2><p>Unit区块的<code>Description</code>字段给出当前服务的简单描述，<code>Documentation</code>字段给出文档位置。</p><p>接下来的设置是启动顺序和依赖关系，这个比较重要。</p><blockquote><p><code>After</code>字段：表示如果network.target或sshd-keygen.service需要启动，那么sshd.service应该在它们之后启动。</p></blockquote><p>相应地，还有一个<code>Before</code>字段，定义sshd.service应该在哪些服务之前启动。</p><p>注意，After和Before字段只涉及启动顺序，不涉及依赖关系。</p><p>举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在 postgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。</p><p>设置依赖关系，需要使用<code>Wants</code>字段和<code>Requires</code>字段。</p><blockquote><ul><li>Wants字段：表示sshd.service与sshd-keygen.service之间存在”弱依赖”关系，即如果”sshd-keygen.service”启动失败或停止运行，不影响sshd.service继续执行。</li><li>Requires字段则表示”强依赖”关系，即如果该服务启动失败或异常退出，那么sshd.service也必须退出。</li></ul></blockquote><p>注意，Wants字段与Requires字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。</p><h2 id="六、-Service-区块：启动行为"><a href="#六、-Service-区块：启动行为" class="headerlink" title="六、[Service] 区块：启动行为"></a>六、[Service] 区块：启动行为</h2><p><code>Service</code>区块定义如何启动当前服务。</p><h3 id="6-1-启动命令"><a href="#6-1-启动命令" class="headerlink" title="6.1 启动命令"></a>6.1 启动命令</h3><p>许多软件都有自己的环境参数文件，该文件可以用<code>EnvironmentFile</code>字段读取。</p><blockquote><p>EnvironmentFile字段：指定当前服务的环境参数文件。该文件内部的key=value键值对，可以用$key的形式，在当前配置文件中获取。</p></blockquote><p>上面的例子中，sshd 的环境参数文件是/etc/sysconfig/sshd。</p><p>配置文件里面最重要的字段是<code>ExecStart</code>。</p><blockquote><p>ExecStart字段：定义启动进程时执行的命令。</p></blockquote><p>上面的例子中，启动sshd，执行的命令是/usr/sbin/sshd -D $OPTIONS，其中的变量$OPTIONS就来自EnvironmentFile字段指定的环境参数文件。</p><p>与之作用相似的，还有如下这些字段。</p><blockquote><p>ExecReload字段：重启服务时执行的命令<br>ExecStop字段：停止服务时执行的命令<br>ExecStartPre字段：启动服务之前执行的命令<br>ExecStartPost字段：启动服务之后执行的命令<br>ExecStopPost字段：停止服务之后执行的命令</p></blockquote><p>请看下面的例子。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=/bin/echo execstart1</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/bin/echo execstart2</span><br><span class="line">ExecStartPost=/bin/echo post1</span><br><span class="line">ExecStartPost=/bin/echo post2</span><br></pre></td></tr></table></figure><p>上面这个配置文件，第二行<code>ExecStart</code>设为空值，等于取消了第一行的设置，运行结果如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execstart2</span><br><span class="line">post1</span><br><span class="line">post2</span><br></pre></td></tr></table></figure><p>所有的启动设置之前，都可以加上一个连词号（<code>-</code>），表示”抑制错误”，即发生错误的时候，不影响其他命令的执行。比如，EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），就表示即使/etc/sysconfig/sshd文件不存在，也不会抛出错误。</p><h3 id="6-2-启动类型"><a href="#6-2-启动类型" class="headerlink" title="6.2 启动类型"></a>6.2 启动类型</h3><p><code>Type</code>字段定义启动类型。它可以设置的值如下。</p><blockquote><p>simple（默认值）：ExecStart字段启动的进程为主进程<br>forking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程<br>oneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务<br>dbus：类似于simple，但会等待 D-Bus 信号后启动<br>notify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务<br>idle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合</p></blockquote><p>下面是一个<code>oneshot</code>的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Switch-off Touchpad</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/bin/touchpad-off</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>上面的配置文件，启动类型设为oneshot，就表明这个服务只要运行一次就够了，不需要长期运行。</p><p>如果关闭以后，将来某个时候还想打开，配置文件修改如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Switch-off Touchpad</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/bin/touchpad-off start</span><br><span class="line">ExecStop=/usr/bin/touchpad-off stop</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>上面配置文件中，RemainAfterExit字段设为yes，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用systemctl stop命令停止服务，ExecStop指定的命令就会执行，从而重新开启触摸板。</p><h3 id="6-3-重启行为"><a href="#6-3-重启行为" class="headerlink" title="6.3 重启行为"></a>6.3 重启行为</h3><p><code>Service</code>区块有一些字段，定义了重启行为。</p><blockquote><p>KillMode字段：定义 Systemd 如何停止 sshd 服务。</p></blockquote><p>上面这个例子中，将<code></code>KillMode<code>设为</code>process`，表示只停止主进程，不停止任何sshd 子进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。</p><p>KillMode字段可以设置的值如下。</p><blockquote><p>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉<br>process：只杀主进程<br>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号<br>none：没有进程会被杀掉，只是执行服务的 stop 命令。</p></blockquote><p>接下来是<code>Restart</code>字段。</p><blockquote><p>Restart字段：定义了 sshd 退出后，Systemd 的重启方式。</p></blockquote><p>上面的例子中，<code>Restart</code>设为<code>on-failure</code>，表示任何意外的失败，就将重启sshd。如果 sshd 正常停止（比如执行systemctl stop命令），它就不会重启。</p><p><code>Restart</code>字段可以设置的值如下。</p><blockquote><p>no（默认值）：退出后不会重启<br>on-success：只有正常退出时（退出状态码为0），才会重启<br>on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启<br>on-abnormal：只有被信号终止和超时，才会重启<br>on-abort：只有在收到没有捕捉到的信号终止时，才会重启<br>on-watchdog：超时退出，才会重启<br>always：不管是什么退出原因，总是重启</p></blockquote><p>对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal。</p><p>最后是<code>RestartSec</code>字段。</p><blockquote><p>RestartSec字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待42秒。</p></blockquote><h2 id="七、-Install-区块"><a href="#七、-Install-区块" class="headerlink" title="七、[Install] 区块"></a>七、[Install] 区块</h2><p><code>Install</code>区块，定义如何安装这个配置文件，即怎样做到开机启动。</p><blockquote><p><code>WantedBy</code>字段：表示该服务所在的 Target。</p></blockquote><p><code>Target</code>的含义是服务组，表示一组服务。WantedBy=multi-user.target指的是，sshd 所在的 Target 是multi-user.target。</p><p>这个设置非常重要，因为执行systemctl enable sshd.service命令时，sshd.service的一个符号链接，就会放在/etc/systemd/system目录下面的multi-user.target.wants子目录之中。</p><p>Systemd 有默认的启动 Target。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl get-default</span></span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure><p>上面的结果表示，默认的启动 Target 是multi-user.target。在这个组里的所有服务，都将开机启动。这就是为什么systemctl enable命令能设置开机启动的原因。</p><p>使用 Target 的时候，systemctl list-dependencies命令和systemctl isolate命令也很有用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 multi-user.target 包含的所有服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-dependencies multi-user.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到另一个 target</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown.target 就是关机状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl isolate shutdown.target</span></span><br></pre></td></tr></table></figure><p>一般来说，常用的 Target 有两个：一个是multi-user.target，表示多用户命令行状态；另一个是graphical.target，表示图形用户状态，它依赖于multi-user.target。官方文档有一张非常清晰的 <a href>Target 依赖关系图</a>。</p><h2 id="八、Target-的配置文件"><a href="#八、Target-的配置文件" class="headerlink" title="八、Target 的配置文件"></a>八、Target 的配置文件</h2><p><code>Target</code> 也有自己的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl cat multi-user.target</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Multi-User System</span><br><span class="line">Documentation=man:systemd.special(7)</span><br><span class="line">Requires=basic.target</span><br><span class="line">Conflicts=rescue.service rescue.target</span><br><span class="line">After=basic.target rescue.service rescue.target</span><br><span class="line">AllowIsolate=yes</span><br></pre></td></tr></table></figure><p>注意，Target 配置文件里面没有启动命令。</p><p>上面输出结果中，主要字段含义如下。</p><blockquote><ul><li>Requires字段：要求basic.target一起运行。</li><li>Conflicts字段：冲突字段。如果rescue.service或rescue.target正在运行，multi-user.target就不能运行，反之亦然。</li><li>After：表示multi-user.target在basic.target 、 rescue.service、 rescue.target之后启动，如果它们有启动的话。</li><li>AllowIsolate：允许使用systemctl isolate命令切换到multi-user.target。</li></ul></blockquote><h2 id="九、修改配置文件后重启"><a href="#九、修改配置文件后重启" class="headerlink" title="九、修改配置文件后重启"></a>九、修改配置文件后重启</h2><p>修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重新加载配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启相关服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart foobar</span></span><br></pre></td></tr></table></figure><p>（完）</p><p>转自：<a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" target="_blank" rel="noopener">阮一峰 - Systemd 入门教程：实战篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章，我介绍了 &lt;a href=&quot;http://victor87.coding.me/2017/11/26/Systemd-cmd/&quot;&gt;Systemd 的主要命令&lt;/a&gt;，今天介绍如何使用它完成一些基本的任务。&lt;br&gt;&lt;img src=&quot;http://www.ruan
      
    
    </summary>
    
      <category term="Linux" scheme="http://victor87.coding.me/categories/Linux/"/>
    
    
      <category term="计算机基础" scheme="http://victor87.coding.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="守护进程" scheme="http://victor87.coding.me/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="Systemd" scheme="http://victor87.coding.me/tags/Systemd/"/>
    
  </entry>
  
  <entry>
    <title>Systemd 基础篇</title>
    <link href="http://victor87.coding.me/2017/11/26/Systemd-cmd/"/>
    <id>http://victor87.coding.me/2017/11/26/Systemd-cmd/</id>
    <published>2017-11-26T17:06:05.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>Systemd 是 Linux 系统工具，用来启动<a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html" target="_blank" rel="noopener">守护进程</a>，已成为大多数发行版的标准配置。</p><p>本文介绍它的基本用法，分为上下两篇。今天介绍它的主要命令，<a href="http://victor87.coding.me/2017/11/26/Systemd-advanced/">下一篇</a>介绍如何用于实战。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030701.gif" alt="systemcd"></p><h2 id="一、由来"><a href="#一、由来" class="headerlink" title="一、由来"></a>一、由来</h2><p>历史上，<a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="noopener">Linux 的启动</a>一直采用 <a href="https://en.wikipedia.org/wiki/Init" target="_blank" rel="noopener">init</a> 进程。</p><p>下面的命令用来启动服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/apache2 start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service apache2 start</span></span><br></pre></td></tr></table></figure><p>这种方法有两个缺点。</p><ul><li><p>一是启动时间长。<code>init</code>进程是串行启动，只有前一个进程启动完，才会启动下一个进程。</p></li><li><p>二是启动脚本复杂。<code>init</code>进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。</p></li></ul><h2 id="二、Systemd-概述"><a href="#二、Systemd-概述" class="headerlink" title="二、Systemd 概述"></a>二、Systemd 概述</h2><p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。</p><p>根据 Linux 惯例，字母<code>d</code>是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030702.jpg" alt="Lennart Poettering"><br>（上图为 Systemd 作者 Lennart Poettering）</p><p>使用了<code>Systemd</code>，就不需要再用<code>init</code>了。<code>Systemd</code>取代了<code>initd</code>，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl --version</span></span><br></pre></td></tr></table></figure><p>上面的命令查看<code>Systemd</code>的版本。</p><p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反”keep simple, keep stupid”的<a href="http://www.ruanyifeng.com/blog/2009/06/unix_philosophy.html" target="_blank" rel="noopener">Unix 哲学</a>。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030703.png" alt="systemctl-framework"><br>（上图为 Systemd 架构图）</p><h2 id="三、系统管理"><a href="#三、系统管理" class="headerlink" title="三、系统管理"></a>三、系统管理</h2><p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p><h3 id="3-1-systemctl"><a href="#3-1-systemctl" class="headerlink" title="3.1 systemctl"></a>3.1 systemctl</h3><p><code>systemctl</code>是 Systemd 的主命令，用于管理系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启系统</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl reboot</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭系统，切断电源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl poweroff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CPU停止工作</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl halt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂停系统</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">suspend</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 让系统进入冬眠状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl hibernate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 让系统进入交互式休眠状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl hybrid-sleep</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动进入救援状态（单用户状态）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl rescue</span></span><br></pre></td></tr></table></figure><h3 id="3-2-systemd-analyze"><a href="#3-2-systemd-analyze" class="headerlink" title="3.2 systemd-analyze"></a>3.2 systemd-analyze</h3><p><code>systemd-analyze</code>命令用于查看启动耗时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看启动耗时</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemd-analyze                                                                                       </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看每个服务的启动耗时</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemd-analyze blame</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示瀑布状的启动过程流</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemd-analyze critical-chain</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定服务的启动流</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemd-analyze critical-chain atd.service</span></span><br></pre></td></tr></table></figure><h3 id="3-3-hostnamectl"><a href="#3-3-hostnamectl" class="headerlink" title="3.3 hostnamectl"></a>3.3 hostnamectl</h3><p><code>hostnamectl</code>命令用于查看当前主机的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示当前主机的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置主机名。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo hostnamectl <span class="built_in">set</span>-hostname rhel7</span></span><br></pre></td></tr></table></figure><h3 id="3-4-localectl"><a href="#3-4-localectl" class="headerlink" title="3.4 localectl"></a>3.4 localectl</h3><p><code>localectl</code>命令用于查看本地化设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地化设置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> localectl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置本地化参数。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo localectl <span class="built_in">set</span>-locale LANG=en_GB.utf8</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo localectl <span class="built_in">set</span>-keymap en_GB</span></span><br></pre></td></tr></table></figure><h3 id="3-5-timedatectl"><a href="#3-5-timedatectl" class="headerlink" title="3.5 timedatectl"></a>3.5 timedatectl</h3><p><code>timedatectl</code>命令用于查看当前时区设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前时区设置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> timedatectl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有可用的时区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> timedatectl list-timezones                                                                                   </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置当前时区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo timedatectl <span class="built_in">set</span>-timezone America/New_York</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo timedatectl <span class="built_in">set</span>-time YYYY-MM-DD</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo timedatectl <span class="built_in">set</span>-time HH:MM:SS</span></span><br></pre></td></tr></table></figure><h3 id="3-6-loginctl"><a href="#3-6-loginctl" class="headerlink" title="3.6 loginctl"></a>3.6 loginctl</h3><p><code>loginctl</code>命令用于查看当前登录的用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出当前session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> loginctl list-sessions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出当前登录用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> loginctl list-users</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出显示指定用户的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> loginctl show-user ruanyf</span></span><br></pre></td></tr></table></figure><h2 id="四、Unit"><a href="#四、Unit" class="headerlink" title="四、Unit"></a>四、Unit</h2><h3 id="4-1-含义"><a href="#4-1-含义" class="headerlink" title="4.1 含义"></a>4.1 含义</h3><p>Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。</p><p>Unit 一共分成12种。</p><blockquote><p>Service unit：系统服务<br>Target unit：多个 Unit 构成的一个组<br>Device Unit：硬件设备<br>Mount Unit：文件系统的挂载点<br>Automount Unit：自动挂载点<br>Path Unit：文件或路径<br>Scope Unit：不是由 Systemd 启动的外部进程<br>Slice Unit：进程组<br>Snapshot Unit：Systemd 快照，可以切回某个快照<br>Socket Unit：进程间通信的 socket<br>Swap Unit：swap 文件<br>Timer Unit：定时器</p></blockquote><p><code>systemctl list-units</code>命令可以查看当前系统的所有 Unit 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出正在运行的 Unit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-units</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-units --all</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有没有运行的 Unit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-units --all --state=inactive</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有加载失败的 Unit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-units --failed</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-units --<span class="built_in">type</span>=service</span></span><br></pre></td></tr></table></figure><h3 id="4-2-Unit-的状态"><a href="#4-2-Unit-的状态" class="headerlink" title="4.2 Unit 的状态"></a>4.2 Unit 的状态</h3><p><code>systemctl status</code>命令用于查看系统状态和单个 Unit 的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示系统状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示单个 Unit 的状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysystemctl status bluetooth.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示远程主机的某个 Unit 的状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl -H root@rhel7.example.com status httpd.service</span></span><br></pre></td></tr></table></figure><p>除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示某个 Unit 是否正在运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl is-active application.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个 Unit 是否处于启动失败状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl is-failed application.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个 Unit 服务是否建立了启动链接</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl is-enabled application.service</span></span><br></pre></td></tr></table></figure><h3 id="4-3-Unit-管理"><a href="#4-3-Unit-管理" class="headerlink" title="4.3 Unit 管理"></a>4.3 Unit 管理</h3><p>对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 立即启动一个服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start apache.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 立即停止一个服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop apache.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启一个服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart apache.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死一个服务的所有子进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">kill</span> apache.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载一个服务的配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl reload apache.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载所有修改过的配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个 Unit 的所有底层参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl show httpd.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个 Unit 的指定属性的值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl show -p CPUShares httpd.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置某个 Unit 的指定属性</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">set</span>-property httpd.service CPUShares=500</span></span><br></pre></td></tr></table></figure><h3 id="4-4-依赖关系"><a href="#4-4-依赖关系" class="headerlink" title="4.4 依赖关系"></a>4.4 依赖关系</h3><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B。</p><p>systemctl list-dependencies命令列出一个 Unit 的所有依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-dependencies nginx.service</span></span><br></pre></td></tr></table></figure><p>上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用<code>--all</code>参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-dependencies --all nginx.service</span></span><br></pre></td></tr></table></figure><h2 id="五、Unit-的配置文件"><a href="#五、Unit-的配置文件" class="headerlink" title="五、Unit 的配置文件"></a>五、Unit 的配置文件</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。</p><p>Systemd 默认从目录<code>/etc/systemd/system/</code>读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录<code>/usr/lib/systemd/system/</code>，真正的配置文件存放在那个目录。</p><p><code>systemctl enable</code>命令用于在上面两个目录之间，建立符号链接关系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> clamd@scan.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s <span class="string">'/usr/lib/systemd/system/clamd@scan.service'</span> <span class="string">'/etc/systemd/system/multi-user.target.wants/clamd@scan.service'</span></span></span><br></pre></td></tr></table></figure><p>如果配置文件里面设置了开机启动，<code>systemctl enable</code>命令相当于激活开机启动。<br>与之对应的，<code>systemctl disable</code>命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">disable</span> clamd@scan.service</span></span><br></pre></td></tr></table></figure><p>配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。</p><h3 id="5-2-配置文件的状态"><a href="#5-2-配置文件的状态" class="headerlink" title="5.2 配置文件的状态"></a>5.2 配置文件的状态</h3><p><code>systemctl list-unit-files</code>命令用于列出所有配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-unit-files</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出指定类型的配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-unit-files --<span class="built_in">type</span>=service</span></span><br></pre></td></tr></table></figure><p>这个命令会输出一个列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-unit-files</span></span><br><span class="line"></span><br><span class="line">UNIT FILE              STATE</span><br><span class="line">chronyd.service        enabled</span><br><span class="line">clamd@.service         static</span><br><span class="line">clamd@scan.service     disabled</span><br></pre></td></tr></table></figure><p>这个列表显示每个配置文件的状态，一共有四种。</p><blockquote><p>enabled：已建立启动链接<br>disabled：没建立启动链接<br>static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖<br>masked：该配置文件被禁止建立启动链接</p></blockquote><p>注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的<code>systemctl status</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl status bluetooth.service</span></span><br></pre></td></tr></table></figure><p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart httpd.service</span></span><br></pre></td></tr></table></figure><h3 id="5-3-配置文件的格式"><a href="#5-3-配置文件的格式" class="headerlink" title="5.3 配置文件的格式"></a>5.3 配置文件的格式</h3><p>配置文件就是普通的文本文件，可以用文本编辑器打开。<br>systemctl cat命令可以查看配置文件的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl cat atd.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=ATD daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/atd</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如[Unit]。注意，配置文件的区块名和字段名，都是大小写敏感的。<br>每个区块内部是一些等号连接的键值对。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Section]</span><br><span class="line">Directive1=value</span><br><span class="line">Directive2=value</span><br><span class="line"></span><br><span class="line">. . .</span><br></pre></td></tr></table></figure><p>注意，键值对的等号两侧不能有空格。</p><h3 id="5-4-配置文件的区块"><a href="#5-4-配置文件的区块" class="headerlink" title="5.4 配置文件的区块"></a>5.4 配置文件的区块</h3><p>[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。</p><blockquote><p>Description：简短描述<br>Documentation：文档地址<br>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败<br>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败<br>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行<br>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动<br>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动<br>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行<br>Condition…：当前 Unit 运行必须满足的条件，否则不会运行<br>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</p></blockquote><p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p><blockquote><p>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中<br>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中<br>Alias：当前 Unit 可用于启动的别名<br>Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</p></blockquote><p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p><blockquote><p>Type：定义启动时的进程行为。它有以下几种值。<br>Type=simple：默认值，执行ExecStart指定的命令，启动主进程<br>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出<br>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行<br>Type=dbus：当前服务通过D-Bus启动<br>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行<br>Type=idle：若有其他任务执行完毕，当前服务才会运行<br>ExecStart：启动当前服务的命令<br>ExecStartPre：启动当前服务之前执行的命令<br>ExecStartPost：启动当前服务之后执行的命令<br>ExecReload：重启当前服务时执行的命令<br>ExecStop：停止当前服务时执行的命令<br>ExecStopPost：停止当其服务之后执行的命令<br>RestartSec：自动重启当前服务间隔的秒数<br>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括<br>always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog<br>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数<br>Environment：指定环境变量</p></blockquote><p>Unit 配置文件的完整字段清单，请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="六、Target"><a href="#六、Target" class="headerlink" title="六、Target"></a>六、Target</h2><p>启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。</p><p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</p><p>传统的<code>init</code>启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前系统的所有 Target</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-unit-files --<span class="built_in">type</span>=target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一个 Target 包含的所有 Unit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl list-dependencies multi-user.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看启动时的默认 Target</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl get-default</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置启动时的默认 Target</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">set</span>-default multi-user.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换 Target 时，默认不关闭前一个 Target 启动的进程，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl isolate 命令改变这种行为，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl isolate multi-user.target</span></span><br></pre></td></tr></table></figure><p>Target 与 传统 RunLevel 的对应关系如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Traditional runlevel      New target name     Symbolically linked to...</span><br><span class="line"></span><br><span class="line">Runlevel 0           |    runlevel0.target -&gt; poweroff.target</span><br><span class="line">Runlevel 1           |    runlevel1.target -&gt; rescue.target</span><br><span class="line">Runlevel 2           |    runlevel2.target -&gt; multi-user.target</span><br><span class="line">Runlevel 3           |    runlevel3.target -&gt; multi-user.target</span><br><span class="line">Runlevel 4           |    runlevel4.target -&gt; multi-user.target</span><br><span class="line">Runlevel 5           |    runlevel5.target -&gt; graphical.target</span><br><span class="line">Runlevel 6           |    runlevel6.target -&gt; reboot.target</span><br></pre></td></tr></table></figure><p>它与<code>init</code>进程的主要差别如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）默认的 RunLevel（在/etc/inittab文件设置）现在被默认的 Target 取代，位置是/etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。</span><br><span class="line">（2）启动脚本的位置，以前是/etc/init.d目录，符号链接到不同的 RunLevel 目录 （比如/etc/rc3.d、/etc/rc5.d等），现在则存放在/lib/systemd/system和/etc/systemd/system目录。</span><br><span class="line">（3）配置文件的位置，以前init进程的配置文件是/etc/inittab，各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录，在/etc/systemd目录里面的修改可以覆盖原始设置。</span><br></pre></td></tr></table></figure><h2 id="七、日志管理"><a href="#七、日志管理" class="headerlink" title="七、日志管理"></a>七、日志管理</h2><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。</p><p><code>journalctl</code>功能强大，用法非常多。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看内核日志（不显示应用日志）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -k</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看系统本次启动的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -b</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -b -0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看上一次启动的日志（需更改设置）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -b -1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定时间的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --since=<span class="string">"2012-10-30 18:17:16"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --since <span class="string">"20 min ago"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --since yesterday</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --since <span class="string">"2015-01-10"</span> --until <span class="string">"2015-01-11 03:00"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --since 09:00 --until <span class="string">"1 hour ago"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示尾部的最新10行日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示尾部指定行数的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -n 20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实时滚动显示最新日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -f</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定服务的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl /usr/lib/systemd/systemd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定进程的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl _PID=1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个路径的脚本的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl /usr/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定用户的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl _UID=33 --since today</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个 Unit 的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -u nginx.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -u nginx.service --since today</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实时滚动显示某个 Unit 的最新日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -u nginx.service -f</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并显示多个 Unit 的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> journalctl -u nginx.service -u php-fpm.service --since today</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0: emerg</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1: alert</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2: crit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3: err</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4: warning</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5: notice</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6: info</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7: debug</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -p err -b</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --no-pager</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以 JSON 格式（单行）输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -b -u nginx.service -o json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl -b -u nginx.serviceqq</span></span><br><span class="line"> -o json-pretty</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志占据的硬盘空间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --disk-usage</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定日志文件占据的最大空间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --vacuum-size=1G</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定日志文件保存多久</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo journalctl --vacuum-time=1years</span></span><br></pre></td></tr></table></figure><p>（完）</p><p>转自：<a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">阮一峰 - Systemd 入门教程：命令篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Systemd 是 Linux 系统工具，用来启动&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;守护进程&lt;/a&gt;，已成为大多
      
    
    </summary>
    
      <category term="Linux" scheme="http://victor87.coding.me/categories/Linux/"/>
    
    
      <category term="计算机基础" scheme="http://victor87.coding.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="守护进程" scheme="http://victor87.coding.me/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="Systemd" scheme="http://victor87.coding.me/tags/Systemd/"/>
    
  </entry>
  
  <entry>
    <title>Linux 守护进程的启动方法</title>
    <link href="http://victor87.coding.me/2017/11/26/Linux-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://victor87.coding.me/2017/11/26/Linux-守护进程的启动方法/</id>
    <published>2017-11-26T16:43:05.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>“<a href="http://baike.baidu.com/view/53123.htm" target="_blank" rel="noopener">守护进程</a>“（daemon）就是一直在后台运行的进程（daemon）。</p><p>本文介绍如何将一个 Web 应用，启动为守护进程。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016022801.png" alt="deamon"></p><h2 id="一、问题的由来"><a href="#一、问题的由来" class="headerlink" title="一、问题的由来"></a>一、问题的由来</h2><p>Web应用写好后，下一件事就是启动，让它一直在后台运行。<br>这并不容易。举例来说，下面是一个最简单的Node应用server.js，只有6行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">  res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;).listen(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>你在命令行下启动它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node server.js</span></span><br></pre></td></tr></table></figure><p>看上去一切正常，所有人都能快乐地访问 5000 端口了。但是，一旦你退出命令行窗口，这个应用就一起退出了，无法访问了。<br>怎么才能让它变成系统的守护进程（daemon），成为一种服务（service），一直在那里运行呢？</p><h2 id="二、前台任务与后台任务"><a href="#二、前台任务与后台任务" class="headerlink" title="二、前台任务与后台任务"></a>二、前台任务与后台任务</h2><p>上面这样启动的脚本，称为”前台任务”（foreground job）。它会独占命令行窗口，只有运行完了或者手动中止，才能执行其他命令。</p><p>变成守护进程的第一步，就是把它改成”后台任务”（background job）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node server.js &amp;</span></span><br></pre></td></tr></table></figure><p>只要在命令的尾部加上符号&amp;，启动的进程就会成为”后台任务”。如果要让正在运行的”前台任务”变为”后台任务”，可以先按ctrl + z，然后执行bg命令（让最近一个暂停的”后台任务”继续执行）。</p><p>“后台任务”有两个特点。</p><blockquote><ol><li>继承当前 session （对话）的标准输出（stdout）和标准错误（stderr）。因此，后台任务的所有输出依然会同步地在命令行下显示。</li><li>不再继承当前 session 的标准输入（stdin）。你无法向这个任务输入指令了。如果它试图读取标准输入，就会暂停执行（halt）。</li></ol></blockquote><p>可以看到，”后台任务”与”前台任务”的本质区别只有一个：是否继承标准输入。所以，执行后台任务的同时，用户还可以输入其他命令。</p><h2 id="三、SIGHUP信号"><a href="#三、SIGHUP信号" class="headerlink" title="三、SIGHUP信号"></a>三、SIGHUP信号</h2><p>变为”后台任务”后，一个进程是否就成为了守护进程呢？或者说，用户退出 session 以后，”后台任务”是否还会继续执行？</p><p>Linux系统是这样设计的。</p><blockquote><ol><li>用户准备退出 session</li><li>系统向该 session 发出SIGHUP信号</li><li>session 将SIGHUP信号发给所有子进程</li><li>子进程收到SIGHUP信号后，自动退出</li></ol></blockquote><p>上面的流程解释了，为什么”前台任务”会随着 session 的退出而退出：因为它收到了<code>SIGHUP</code>信号。</p><p>那么，”后台任务”是否也会收到<code>SIGHUP</code>信号？</p><p>这由 Shell 的<code>huponexit</code>参数决定的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">shopt</span> | grep huponexit</span></span><br></pre></td></tr></table></figure><p>执行上面的命令，就会看到<code>huponexit</code>参数的值。<br>大多数Linux系统，这个参数默认关闭（<code>off</code>）。因此，session 退出的时候，不会把<code>SIGHUP</code>信号发给”后台任务”。所以，一般来说，”后台任务”不会随着 session 一起退出。</p><h2 id="四、disown-命令"><a href="#四、disown-命令" class="headerlink" title="四、disown 命令"></a>四、disown 命令</h2><p>通过”后台任务”启动”守护进程”并不保险，因为有的系统的<code>huponexit</code>参数可能是打开的（<code>on</code>）。</p><p>更保险的方法是使用<code>disown</code>命令。它可以将指定任务从”后台任务”列表（jobs命令的返回结果）之中移除。一个”后台任务”只要不在这个列表之中，session 就肯定不会向它发出SIGHUP信号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node server.js &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span></span></span><br></pre></td></tr></table></figure><p>执行上面的命令以后，server.js进程就被移出了”后台任务”列表。你可以执行jobs命令验证，输出结果里面，不会有这个进程。</p><p>disown的用法如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移出最近一个正在执行的后台任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移出所有正在执行的后台任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span> -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移出所有后台任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span> -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不移出后台任务，但是让它们不会收到SIGHUP信号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span> -h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据jobId，移出指定的后台任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span> %2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span> -h %2</span></span><br></pre></td></tr></table></figure><h2 id="五、标准-I-O"><a href="#五、标准-I-O" class="headerlink" title="五、标准 I/O"></a>五、标准 I/O</h2><p>使用<code>disown</code>命令之后，还有一个问题。那就是，退出 session 以后，如果后台进程与标准I/O有交互，它还是会挂掉。</p><p>还是以上面的脚本为例，现在加入一行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var http = require('http');</span><br><span class="line"></span><br><span class="line">http.createServer(function(req, res) &#123;</span><br><span class="line">  console.log('server starts...'); // 加入此行</span><br><span class="line">  res.writeHead(200, &#123;'Content-Type': 'text/plain'&#125;);</span><br><span class="line">  res.end('Hello World');</span><br><span class="line">&#125;).listen(5000);</span><br></pre></td></tr></table></figure><p>启动上面的脚本，然后再执行<code>disown</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node server.js &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span></span></span><br></pre></td></tr></table></figure><p>接着，你退出 session，访问5000端口，就会发现连不上。</p><p>这是因为”后台任务”的标准 I/O 继承自当前 session，disown命令并没有改变这一点。一旦”后台任务”读写标准 I/O，就会发现它已经不存在了，所以就报错终止执行。</p><p>为了解决这个问题，需要对”后台任务”的标准 I/O 进行重定向。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node server.js &gt; stdout.txt 2&gt; stderr.txt &lt; /dev/null &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">disown</span></span></span><br></pre></td></tr></table></figure><p>上面这样执行，基本上就没有问题了。</p><h2 id="六、nohup-命令"><a href="#六、nohup-命令" class="headerlink" title="六、nohup 命令"></a>六、nohup 命令</h2><p>还有比<code>disown</code>更方便的命令，就是<code>nohup</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup node server.js &amp;</span></span><br></pre></td></tr></table></figure><p><code>nohup</code>命令对server.js进程做了三件事。</p><blockquote><p>阻止SIGHUP信号发到这个进程。<br>关闭标准输入。该进程不再能够接收任何输入，即使运行在前台。<br>重定向标准输出和标准错误到文件nohup.out。</p></blockquote><p>也就是说，<code>nohup</code>命令实际上将子进程与它所在的 session 分离了。<br>注意，nohup命令不会自动把进程变为”后台任务”，所以必须加上&amp;符号。</p><h2 id="七、Screen-命令与-Tmux-命令"><a href="#七、Screen-命令与-Tmux-命令" class="headerlink" title="七、Screen 命令与 Tmux 命令"></a>七、Screen 命令与 Tmux 命令</h2><p>另一种思路是使用 terminal multiplexer （终端复用器：在同一个终端里面，管理多个session），典型的就是 <a href="https://www.gnu.org/software/screen/" target="_blank" rel="noopener">Screen</a> 命令和 <a href="https://tmux.github.io/" target="_blank" rel="noopener">Tmux</a> 命令。</p><p>它们可以在当前 session 里面，新建另一个 session。这样的话，当前 session 一旦结束，不影响其他 session。而且，以后重新登录，还可以再连上早先新建的 session。</p><p>Screen 的用法如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建一个 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> screen</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node server.js</span></span><br></pre></td></tr></table></figure><p>然后，按下ctrl + A和ctrl + D，回到原来的 session，从那里退出登录。下次登录时，再切回去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> screen -r</span></span><br></pre></td></tr></table></figure><p>如果新建多个后台 session，就需要为它们指定名字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> screen -S name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切回指定 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> screen -r name</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> screen -r pid_number</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> screen -ls</span></span><br></pre></td></tr></table></figure><p>如果要停掉某个 session，可以先切回它，然后按下ctrl + c和ctrl + d。<br>Tmux 比 Screen 功能更多、更强大，它的基本用法如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node server.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回原来的session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux detach</span></span><br></pre></td></tr></table></figure><p>除了tmux detach，另一种方法是按下Ctrl + B和d ，也可以回到原来的 session。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下次登录时，返回后台正在运行服务session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach</span></span><br></pre></td></tr></table></figure><p>如果新建多个 session，就需要为每个 session 指定名字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux new -s session_name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach -t session_name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux list-sessions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出当前 session，返回前一个 session </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux detach</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死指定 session</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -t session-name</span></span><br></pre></td></tr></table></figure><h2 id="八、Node-工具"><a href="#八、Node-工具" class="headerlink" title="八、Node 工具"></a>八、Node 工具</h2><p>对于 Node 应用来说，可以不用上面的方法，有一些专门用来启动的工具：<a href="https://github.com/foreverjs/forever" target="_blank" rel="noopener">forever</a>，<a href="http://nodemon.io/" target="_blank" rel="noopener">nodemon</a> 和 <a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">pm2</a>。</p><p>forever 的功能很简单，就是保证进程退出时，应用会自动重启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 作为前台任务启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever server.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 作为服务进程启动 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever start app.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever stop Id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever restart Id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监视当前目录的文件变动，一有变动就重启</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever -w server.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m 参数指定最多重启次数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever -m 5 server.js </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> forever list</span></span><br></pre></td></tr></table></figure><p><code>nodemon</code>一般只在开发时使用，它最大的长处在于 watch 功能，一旦文件发生变化，就自动重启进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认监视当前目录的文件变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nodemon server.js</span></span><br><span class="line"></span><br><span class="line">＃ 监视指定文件的变化   </span><br><span class="line"><span class="meta">$</span><span class="bash"> nodemon --watch app --watch libs server.js</span></span><br></pre></td></tr></table></figure><p>pm2 的功能最强大，除了重启进程以外，还能实时收集日志和监控。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定同时起多少个进程（由CPU核心数决定），组成一个集群</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js -i max</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 list</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止指定任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 stop 0</span></span><br><span class="line"></span><br><span class="line">＃ 重启指定任务</span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 restart 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 delete 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存当前的所有任务，以后可以恢复</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 save</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出每个进程的统计数据</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 monit</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 logs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出数据</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 dump</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启所有进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 <span class="built_in">kill</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 resurect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动web界面 http://localhost:9615</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 web</span></span><br></pre></td></tr></table></figure><h2 id="十、Systemd"><a href="#十、Systemd" class="headerlink" title="十、Systemd"></a>十、Systemd</h2><p>除了专用工具以外，Linux系统有自己的守护进程管理工具 Systemd 。它是操作系统的一部分，直接与内核交互，性能出色，功能极其强大。我们完全可以将程序交给 Systemd ，让系统统一管理，成为真正意义上的系统服务。</p><p>下一篇文章，我就来介绍 <a href="http://victor87.coding.me/2017/11/26/Systemd-cmd/">Systemd</a>。</p><p>（完）</p><p>转自：<a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html" target="_blank" rel="noopener">阮一峰 - Linux 守护进程的启动方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“&lt;a href=&quot;http://baike.baidu.com/view/53123.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;守护进程&lt;/a&gt;“（daemon）就是一直在后台运行的进程（daemon）。&lt;/p&gt;
&lt;p&gt;本文介绍如何将一个 W
      
    
    </summary>
    
      <category term="Linux" scheme="http://victor87.coding.me/categories/Linux/"/>
    
    
      <category term="计算机基础" scheme="http://victor87.coding.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Linux" scheme="http://victor87.coding.me/tags/Linux/"/>
    
      <category term="守护进程" scheme="http://victor87.coding.me/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux 的启动流程</title>
    <link href="http://victor87.coding.me/2017/11/26/Linux-%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://victor87.coding.me/2017/11/26/Linux-的启动流程/</id>
    <published>2017-11-26T15:58:39.000Z</published>
    <updated>2019-12-19T06:40:51.299Z</updated>
    
    <content type="html"><![CDATA[<p>半年前，我写了《<a href="http://victor87.coding.me/2017/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E7%9A%84%EF%BC%9F/">计算机是如何启动的？</a>》，探讨BIOS和主引导记录的作用。</p><p>那篇文章不涉及操作系统，只与主板的板载程序有关。今天，我想接着往下写，探讨操作系统接管硬件以后发生的事情，也就是操作系统的启动流程。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081701.png" alt="boot-workflow"><br>这个部分比较有意思。因为在BIOS阶段，计算机的行为基本上被写死了，程序员可以做的事情并不多；但是，一旦进入操作系统，程序员几乎可以定制所有方面。所以，这个部分与程序员的关系更密切。</p><p>我主要关心的是Linux操作系统，它是目前服务器端的主流操作系统。下面的内容针对的是<a href="http://en.wikipedia.org/wiki/Debian" target="_blank" rel="noopener">Debian</a>发行版，因为我对其他发行版不够熟悉。</p><h2 id="第一步、加载内核"><a href="#第一步、加载内核" class="headerlink" title="第一步、加载内核"></a>第一步、加载内核</h2><p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081702.png" alt="boot"><br>以我的电脑为例，/boot 目录下面大概是这样一些文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /boot</span></span><br><span class="line">　　</span><br><span class="line">config-3.2.0-3-amd64</span><br><span class="line">config-3.2.0-4-amd64</span><br><span class="line">grub</span><br><span class="line">initrd.img-3.2.0-3-amd64</span><br><span class="line">initrd.img-3.2.0-4-amd64</span><br><span class="line">System.map-3.2.0-3-amd64</span><br><span class="line">System.map-3.2.0-4-amd64</span><br><span class="line">vmlinuz-3.2.0-3-amd64</span><br><span class="line">vmlinuz-3.2.0-4-amd64</span><br></pre></td></tr></table></figure><h2 id="第二步、启动初始化进程"><a href="#第二步、启动初始化进程" class="headerlink" title="第二步、启动初始化进程"></a>第二步、启动初始化进程</h2><p>内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081703.png" alt="init"><br>由于init是第一个运行的程序，它的进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程。</p><h2 id="第三步、确定运行级别"><a href="#第三步、确定运行级别" class="headerlink" title="第三步、确定运行级别"></a>第三步、确定运行级别</h2><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”<a href="http://zh.wikipedia.org/wiki/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B" target="_blank" rel="noopener">守护进程</a>“（daemon）。</p><p>init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”<a href="http://zh.wikipedia.org/wiki/%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB" target="_blank" rel="noopener">运行级别</a>“，确定要运行哪些程序。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081704.png" alt="run-level"><br>Linux预置七种运行级别（0-6）。一般来说，0是关机，1是单用户模式（也就是维护模式），6是重启。运行级别2-5，各个发行版不太一样，对于Debian来说，都是同样的多用户模式（也就是正常模式）。</p><p>init进程首先读取文件 /etc/inittab，它是运行级别的设置文件。如果你打开它，可以看到第一行是这样的：</p><blockquote><p>id:2:initdefault:</p></blockquote><p>initdefault的值是2，表明系统启动时的运行级别为2。如果需要指定其他级别，可以手动修改这个值。</p><p>那么，运行级别2有些什么程序呢，系统怎么知道每个级别应该加载哪些程序呢？……回答是每个运行级别在/etc目录下面，都有一个对应的子目录，指定要加载的程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc0.d</span><br><span class="line">/etc/rc1.d</span><br><span class="line">/etc/rc2.d</span><br><span class="line">/etc/rc3.d</span><br><span class="line">/etc/rc4.d</span><br><span class="line">/etc/rc5.d</span><br><span class="line">/etc/rc6.d</span><br></pre></td></tr></table></figure><p>　　<br>上面目录名中的”rc”，表示run command（运行程序），最后的d表示directory（目录）。下面让我们看看 /etc/rc2.d 目录中到底指定了哪些程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls  /etc/rc2.d</span></span><br><span class="line">　　</span><br><span class="line">README</span><br><span class="line">S01motd</span><br><span class="line">S13rpcbind</span><br><span class="line">S14nfs-common</span><br><span class="line">S16binfmt-support</span><br><span class="line">S16rsyslog</span><br><span class="line">S16sudo</span><br><span class="line">S17apache2</span><br><span class="line">S18acpid</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到，除了第一个文件README以外，其他文件名都是”字母S+两位数字+程序名”的形式。字母S表示Start，也就是启动的意思（启动脚本的运行参数为start），如果这个位置是字母K，就代表Kill（关闭），即如果从其他运行级别切换过来，需要关闭的程序（启动脚本的运行参数为stop）。后面的两位数字表示处理顺序，数字越小越早处理，所以第一个启动的程序是motd，然后是rpcbing、nfs……数字相同时，则按照程序名的字母顺序启动，所以rsyslog会先于sudo启动。</p><p>这个目录里的所有文件（除了README），就是启动时要加载的程序。如果想增加或删除某些程序，不建议手动修改 /etc/rcN.d 目录，最好是用一些专门命令进行管理（参考这里和这里）。</p><h2 id="第四步、加载开机启动程序"><a href="#第四步、加载开机启动程序" class="headerlink" title="第四步、加载开机启动程序"></a>第四步、加载开机启动程序</h2><p>前面提到，七种预设的”运行级别”各自有一个目录，存放需要开机启动的程序。不难想到，如果多个”运行级别”需要启动同一个程序，那么这个程序的启动脚本，就会在每一个目录里都有一个拷贝。这样会造成管理上的困扰：如果要修改启动脚本，岂不是每个目录都要改一遍？</p><p>Linux的解决办法，就是七个 /etc/rcN.d 目录里列出的程序，都设为链接文件，指向另外一个目录 /etc/init.d ，真正的启动脚本都统一放在这个目录中。init进程逐一加载开机启动程序，其实就是运行这个目录里的启动脚本。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081705.png" alt="init.d"><br>下面就是链接文件真正的指向。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -l /etc/rc2.d</span></span><br><span class="line">　　</span><br><span class="line">README</span><br><span class="line">S01motd -&gt; ../init.d/motd</span><br><span class="line">S13rpcbind -&gt; ../init.d/rpcbind</span><br><span class="line">S14nfs-common -&gt; ../init.d/nfs-common</span><br><span class="line">S16binfmt-support -&gt; ../init.d/binfmt-support</span><br><span class="line">S16rsyslog -&gt; ../init.d/rsyslog</span><br><span class="line">S16sudo -&gt; ../init.d/sudo</span><br><span class="line">S17apache2 -&gt; ../init.d/apache2</span><br><span class="line">S18acpid -&gt; ../init.d/acpid</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>　　<br>这样做的另一个好处，就是如果你要手动关闭或重启某个进程，直接到目录 /etc/init.d 中寻找启动脚本即可。比如，我要重启Apache服务器，就运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/apache2 restart</span></span><br></pre></td></tr></table></figure><p>/etc/init.d 这个目录名最后一个字母d，是directory的意思，表示这是一个目录，用来与程序 /etc/init 区分。</p><h2 id="第五步、用户登录"><a href="#第五步、用户登录" class="headerlink" title="第五步、用户登录"></a>第五步、用户登录</h2><p>开机启动程序加载完毕以后，就要让用户登录了。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081706.png" alt="login"><br>一般来说，用户的登录方式有三种：</p><blockquote><p>（1）命令行登录<br>（2）ssh登录<br>（3）图形界面登录</p></blockquote><p>这三种情况，都有自己的方式对用户进行认证。</p><ol><li>命令行登录：init进程调用getty程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用login程序，核对密码（Debian还会再多运行一个身份核对程序/etc/pam.d/login）。如果密码正确，就从文件 /etc/passwd 读取该用户指定的shell，然后启动这个shell。</li><li>ssh登录：这时系统调用sshd程序（Debian还会再运行/etc/pam.d/ssh ），取代getty和login，然后启动shell。</li><li>图形界面登录：init进程调用显示管理器，Gnome图形界面对应的显示管理器为gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取/etc/gdm3/Xsession，启动用户的会话。</li></ol><h2 id="第六步、进入-login-shell"><a href="#第六步、进入-login-shell" class="headerlink" title="第六步、进入 login shell"></a>第六步、进入 login shell</h2><p>所谓shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的shell，就叫做login shell。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081707.png" alt="login-shell"><br>Debian默认的shell是Bash，它会读入一系列的配置文件。上一步的三种情况，在这一步的处理，也存在差异。</p><p>（1）命令行登录：首先读入 /etc/profile，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile</span><br><span class="line">~/.bash_login</span><br><span class="line">~/.profile</span><br></pre></td></tr></table></figure><p>　　<br>需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了。比如，要是 ~/.bash_profile 存在，就不会再读入后面两个文件了。</p><p>（2）ssh登录：与第一种情况完全相同。</p><p>（3）图形界面登录：只加载 /etc/profile 和 ~/.profile。也就是说，~/.bash_profile 不管有没有，都不会运行。</p><h2 id="第七步，打开-non-login-shell"><a href="#第七步，打开-non-login-shell" class="headerlink" title="第七步，打开 non-login shell"></a>第七步，打开 non-login shell</h2><p>老实说，上一步完成以后，Linux的启动过程就算结束了，用户已经可以看到命令行提示符或者图形界面了。但是，为了内容的完整，必须再介绍一下这一步。</p><p>用户进入操作系统以后，常常会再手动开启一个shell。这个shell就叫做 non-login shell，意思是它不同于登录时出现的那个shell，不读取/etc/profile和.profile等配置文件。<br><img src="http://www.ruanyifeng.com/blogimg/asset/201308/bg2013081708.png" alt="non-login shell"></p><p>non-login shell的重要性，不仅在于它是用户最常接触的那个shell，还在于它会读入用户自己的bash配置文件 ~/.bashrc。大多数时候，我们对于bash的定制，都是写在这个文件里面的。</p><p>你也许会问，要是不进入 non-login shell，岂不是.bashrc就不会运行了，因此bash 也就不能完成定制了？事实上，Debian已经考虑到这个问题了，请打开文件 ~/.profile，可以看到下面的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ -n "$BASH_VERSION" ]; then</span><br><span class="line">　　if [ -f "$HOME/.bashrc" ]; then</span><br><span class="line">　　　　. "$HOME/.bashrc"</span><br><span class="line">　　fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>　　<br>上面代码先判断变量 $BASH_VERSION 是否有值，然后判断主目录下是否存在 .bashrc 文件，如果存在就运行该文件。第三行开头的那个点，是source命令的简写形式，表示运行某个文件，写成”source ~/.bashrc”也是可以的。</p><p>因此，只要运行～/.profile文件，～/.bashrc文件就会连带运行。但是上一节的第一种情况提到过，如果存在～/.bash_profile文件，那么有可能不会运行～/.profile文件。解决这个问题很简单，把下面代码写入.bash_profile就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f ~/.profile ]; then</span><br><span class="line">　　. ~/.profile</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>　　<br>这样一来，不管是哪种情况，.bashrc都会执行，用户的设置可以放心地都写入这个文件了。</p><p>Bash的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash的作者只好把配置文件分成了几个部分，阶段性载入。系统的通用设置放在 /etc/profile，用户个人的、需要被所有子进程继承的设置放在.profile，不需要被继承的设置放在.bashrc。</p><p>顺便提一下，除了Linux以外， Mac OS X 使用的shell也是Bash。但是，它只加载.bash_profile，然后在.bash_profile里面调用.bashrc。而且，不管是ssh登录，还是在图形界面里启动shell窗口，都是如此。</p><p>参考链接</p><blockquote><p>[1] Debian Wiki, Environment Variables<br>[2] Debian Wiki, Dot Files<br>[3] Debian Administration, An introduction to run-levels<br>[4] Debian Admin，Debian and Ubuntu Linux Run Levels<br>[5] Linux Information Project (LINFO), Runlevel Definition<br>[6] LinuxQuestions.org, What are run levels?<br>[7] Dalton Hubble, Bash Configurations Demystified</p></blockquote><p>（完）</p><p>转自：<a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="noopener">阮一峰 - Linux 的启动流程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;半年前，我写了《&lt;a href=&quot;http://victor87.coding.me/2017/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E7%9A%84%E
      
    
    </summary>
    
      <category term="Linux" scheme="http://victor87.coding.me/categories/Linux/"/>
    
    
      <category term="计算机基础" scheme="http://victor87.coding.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Linux" scheme="http://victor87.coding.me/tags/Linux/"/>
    
      <category term="启动流程" scheme="http://victor87.coding.me/tags/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
</feed>
